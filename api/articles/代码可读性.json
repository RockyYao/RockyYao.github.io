{"title":"代码可读性","slug":"代码可读性","date":"2018-06-18T00:47:41.000Z","updated":"2018-09-26T07:52:29.741Z","comments":true,"path":"api/articles/代码可读性.json","photos":[],"link":"","excerpt":"一、可读性的重要性二、用名字表达代码含义三、名字不能带来歧义四、良好的代码风格五、为何编写注释六、如何编写注释七、提高控制流的可读性八、拆分长表达式九、变量与可读性十、抽取函数十一、一次只做一件事十二、用自然语言表述代码十三、减少代码量参考资料","covers":["../pics//05907ab4-42c5-4b5e-9388-6617f6c97bea.jpg"],"content":"<!-- GFM-TOC -->\n<ul>\n<li><a href=\"#一可读性的重要性\">一、可读性的重要性</a></li>\n<li><a href=\"#二用名字表达代码含义\">二、用名字表达代码含义</a></li>\n<li><a href=\"#三名字不能带来歧义\">三、名字不能带来歧义</a></li>\n<li><a href=\"#四良好的代码风格\">四、良好的代码风格</a></li>\n<li><a href=\"#五为何编写注释\">五、为何编写注释</a></li>\n<li><a href=\"#六如何编写注释\">六、如何编写注释</a></li>\n<li><a href=\"#七提高控制流的可读性\">七、提高控制流的可读性</a></li>\n<li><a href=\"#八拆分长表达式\">八、拆分长表达式</a></li>\n<li><a href=\"#九变量与可读性\">九、变量与可读性</a></li>\n<li><a href=\"#十抽取函数\">十、抽取函数</a></li>\n<li><a href=\"#十一一次只做一件事\">十一、一次只做一件事</a></li>\n<li><a href=\"#十二用自然语言表述代码\">十二、用自然语言表述代码</a></li>\n<li><a href=\"#十三减少代码量\">十三、减少代码量</a></li>\n<li><a href=\"#参考资料\">参考资料</a><!-- GFM-TOC -->\n</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"一、可读性的重要性\"><a href=\"#一、可读性的重要性\" class=\"headerlink\" title=\"一、可读性的重要性\"></a>一、可读性的重要性</h1><p>编程有很大一部分时间是在阅读代码，不仅要阅读自己的代码，而且要阅读别人的代码。因此，可读性良好的代码能够大大提高编程效率。</p>\n<p>可读性良好的代码往往会让代码架构更好，因为程序员更愿意去修改这部分代码，而且也更容易修改。</p>\n<p>只有在核心领域为了效率才可以放弃可读性，否则可读性是第一位。</p>\n<h1 id=\"二、用名字表达代码含义\"><a href=\"#二、用名字表达代码含义\" class=\"headerlink\" title=\"二、用名字表达代码含义\"></a>二、用名字表达代码含义</h1><p>一些比较有表达力的单词：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">单词</th>\n<th>可替代单词</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">send</td>\n<td>deliver、dispatch、announce、distribute、route</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">find</td>\n<td>search、extract、locate、recover</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">start</td>\n<td>launch、create、begin、open</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">make</td>\n<td>create、set up、build、generate、compose、add、new</td>\n</tr>\n</tbody>\n</table>\n<p>使用 i、j、k 作为循环迭代器的名字过于简单，user_i、member_i 这种名字会更有表达力。因为循环层次越多，代码越难理解，有表达力的迭代器名字可读性会更高。</p>\n<p>为名字添加形容词等信息能让名字更具有表达力，但是名字也会变长。名字长短的准则是：作用域越大，名字越长。因此只有在短作用域才能使用一些简单名字。</p>\n<h1 id=\"三、名字不能带来歧义\"><a href=\"#三、名字不能带来歧义\" class=\"headerlink\" title=\"三、名字不能带来歧义\"></a>三、名字不能带来歧义</h1><p>起完名字要思考一下别人会对这个名字有何解读，会不会误解了原本想表达的含义。</p>\n<p>布尔相关的命名加上 is、can、should、has 等前缀。</p>\n<ul>\n<li>用 min、max 表示数量范围；</li>\n<li>用 first、last 表示访问空间的包含范围；</li>\n<li>begin、end 表示访问空间的排除范围，即 end 不包含尾部。</li>\n</ul>\n<p><div align=\"center\"> <img src=\"../pics//05907ab4-42c5-4b5e-9388-6617f6c97bea.jpg\"> </div><br></p>\n<h1 id=\"四、良好的代码风格\"><a href=\"#四、良好的代码风格\" class=\"headerlink\" title=\"四、良好的代码风格\"></a>四、良好的代码风格</h1><p>适当的空行和缩进。</p>\n<p>排列整齐的注释：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;   <span class=\"comment\">// 注释</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">11</span>;  <span class=\"comment\">// 注释</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> c = <span class=\"number\">111</span>; <span class=\"comment\">// 注释</span></span><br></pre></td></tr></table></figure>\n<p>语句顺序不能随意，比如与 html 表单相关联的变量的赋值应该和表单在 html 中的顺序一致。</p>\n<h1 id=\"五、为何编写注释\"><a href=\"#五、为何编写注释\" class=\"headerlink\" title=\"五、为何编写注释\"></a>五、为何编写注释</h1><p>阅读代码首先会注意到注释，如果注释没太大作用，那么就会浪费代码阅读的时间。那些能直接看出含义的代码不需要写注释，特别是并不需要为每个方法都加上注释，比如那些简单的 getter 和 setter 方法，为这些方法写注释反而让代码可读性更差。</p>\n<p>不能因为有注释就随便起个名字，而是争取起个好名字而不写注释。</p>\n<p>可以用注释来记录采用当前解决办法的思考过程，从而让读者更容易理解代码。</p>\n<p>注释用来提醒一些特殊情况。</p>\n<p>用 TODO 等做标记：</p>\n<table>\n<thead>\n<tr>\n<th>标记</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TODO</td>\n<td>待做</td>\n</tr>\n<tr>\n<td>FIXME</td>\n<td>待修复</td>\n</tr>\n<tr>\n<td>HACK</td>\n<td>粗糙的解决方案</td>\n</tr>\n<tr>\n<td>XXX</td>\n<td>危险！这里有重要的问题</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"六、如何编写注释\"><a href=\"#六、如何编写注释\" class=\"headerlink\" title=\"六、如何编写注释\"></a>六、如何编写注释</h1><p>尽量简洁明了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The first String is student's name</span></span><br><span class=\"line\"><span class=\"comment\">// The Second Integer is student's score</span></span><br><span class=\"line\">Map&lt;String, Integer&gt; scoreMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Student's name -&gt; Student's score</span></span><br><span class=\"line\">Map&lt;String, Integer&gt; scoreMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<p>添加测试用例来说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// Example: add(1, 2), return 3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用专业名词来缩短概念上的解释，比如用设计模式名来说明代码。</p>\n<h1 id=\"七、提高控制流的可读性\"><a href=\"#七、提高控制流的可读性\" class=\"headerlink\" title=\"七、提高控制流的可读性\"></a>七、提高控制流的可读性</h1><p>条件表达式中，左侧是变量，右侧是常数。比如下面第一个语句正确：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (len &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">10</span> &gt; len)</span><br></pre></td></tr></table></figure>\n<p>只有在逻辑简单的情况下使用 ? : 三目运算符来使代码更紧凑，否则应该拆分成 if / else；</p>\n<p>do / while 的条件放在后面，不够简单明了，并且会有一些迷惑的地方，最好使用 while 来代替。</p>\n<p>如果只有一个 goto 目标，那么 goto 尚且还能接受，但是过于复杂的 goto 会让代码可读性特别差，应该避免使用 goto。</p>\n<p>在嵌套的循环中，用一些 return 语句往往能减少嵌套的层数。</p>\n<h1 id=\"八、拆分长表达式\"><a href=\"#八、拆分长表达式\" class=\"headerlink\" title=\"八、拆分长表达式\"></a>八、拆分长表达式</h1><p>长表达式的可读性很差，可以引入一些解释变量从而拆分表达式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> line.split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>].strip() == <span class=\"string\">\"root\"</span>:</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username = line.split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>].strip()</span><br><span class=\"line\"><span class=\"keyword\">if</span> username == <span class=\"string\">\"root\"</span>:</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<p>使用摩根定理简化一些逻辑表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!a &amp;&amp; !b) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!(a || b)) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"九、变量与可读性\"><a href=\"#九、变量与可读性\" class=\"headerlink\" title=\"九、变量与可读性\"></a>九、变量与可读性</h1><p><strong>去除控制流变量</strong> 。在循环中通过使用 break 或者 return 可以减少控制流变量的使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> done = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"comment\">/* condition */</span> &amp;&amp; !done) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ... ) &#123;</span><br><span class=\"line\">        done = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"comment\">/* condition */</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ... ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>减小变量作用域</strong> 。作用域越小，越容易定位到变量所有使用的地方。</p>\n<p>JavaScript 可以用闭包减小作用域。以下代码中 submit_form 是函数变量，submitted 变量控制函数不会被提交两次。第一个实现中 submitted 是全局变量，第二个实现把 submitted 放到匿名函数中，从而限制了起作用域范围。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">submitted = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> submit_form = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">form_name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (submitted) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    submitted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> submit_form = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> submitted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">form_name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(submitted) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        submitted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;());  <span class=\"comment\">// () 使得外层匿名函数立即执行</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript 中没有用 var 声明的变量都是全局变量，而全局变量很容易造成迷惑，因此应当总是用 var 来声明变量。</p>\n<p>变量定义的位置应当离它使用的位置最近。</p>\n<p><strong>实例解析</strong> </p>\n<p>在一个网页中有以下文本输入字段：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">\"text\"</span> <span class=\"attr\">id</span> = <span class=\"string\">\"input1\"</span> <span class=\"attr\">value</span> = <span class=\"string\">\"a\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">\"text\"</span> <span class=\"attr\">id</span> = <span class=\"string\">\"input2\"</span> <span class=\"attr\">value</span> = <span class=\"string\">\"b\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">\"text\"</span> <span class=\"attr\">id</span> = <span class=\"string\">\"input3\"</span> <span class=\"attr\">value</span> = <span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">\"text\"</span> <span class=\"attr\">id</span> = <span class=\"string\">\"input4\"</span> <span class=\"attr\">value</span> = <span class=\"string\">\"d\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在要接受一个字符串并把它放到第一个空的 input 字段中，初始实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> setFirstEmptyInput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">new_alue</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> found = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> elem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'input'</span> + i);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (elem != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elem.value === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">            found = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        elem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'input'</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (found) elem.value = new_value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> elem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上实现有以下问题：</p>\n<ul>\n<li>found 可以去除；</li>\n<li>elem 作用域过大；</li>\n<li>可以用 for 循环代替 while 循环；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> setFirstEmptyInput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">new_value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; <span class=\"literal\">true</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> elem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'input'</span> + i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elem === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elem.value === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">            elem.value = new_value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> elem;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"十、抽取函数\"><a href=\"#十、抽取函数\" class=\"headerlink\" title=\"十、抽取函数\"></a>十、抽取函数</h1><p>工程学就是把大问题拆分成小问题再把这些问题的解决方案放回一起。</p>\n<p>首先应该明确一个函数的高层次目标，然后对于不是直接为了这个目标工作的代码，抽取出来放到独立的函数中。</p>\n<p>介绍性的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findClostElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> clostIdx;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> clostDist = Interger.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = ...;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = ...;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> z = ...;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value = x * y * z;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dist = Math.sqrt(Math.pow(value, <span class=\"number\">2</span>), Math.pow(arr[i], <span class=\"number\">2</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dist &lt; clostDist) &#123;</span><br><span class=\"line\">            clostIdx = i;</span><br><span class=\"line\">            clostDist = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clostIdx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码中循环部分主要计算距离，这部分不属于代码高层次目标，高层次目标是寻找最小距离的值，因此可以把这部分代替提取到独立的函数中。这样做也带来一个额外的好处有：可以单独进行测试、可以快速找到程序错误并修改。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findClostElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> clostIdx;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> clostDist = Interger.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dist = computDist(arr, i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dist &lt; clostDist) &#123;</span><br><span class=\"line\">            clostIdx = i;</span><br><span class=\"line\">            clostDist = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clostIdx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>并不是函数抽取的越多越好，如果抽取过多，在阅读代码的时候可能需要不断跳来跳去。只有在当前函数不需要去了解某一块代码细节而能够表达其内容时，把这块代码抽取成子函数才是好的。</p>\n<p>函数抽取也用于减小代码的冗余。</p>\n<h1 id=\"十一、一次只做一件事\"><a href=\"#十一、一次只做一件事\" class=\"headerlink\" title=\"十一、一次只做一件事\"></a>十一、一次只做一件事</h1><p>只做一件事的代码很容易让人知道其要做的事；</p>\n<p>基本流程：列出代码所做的所有任务；把每个任务拆分到不同的函数，或者不同的段落。</p>\n<h1 id=\"十二、用自然语言表述代码\"><a href=\"#十二、用自然语言表述代码\" class=\"headerlink\" title=\"十二、用自然语言表述代码\"></a>十二、用自然语言表述代码</h1><p>先用自然语言书写代码逻辑，也就是伪代码，然后再写代码，这样代码逻辑会更清晰。</p>\n<h1 id=\"十三、减少代码量\"><a href=\"#十三、减少代码量\" class=\"headerlink\" title=\"十三、减少代码量\"></a>十三、减少代码量</h1><p>不要过度设计，编码过程会有很多变化，过度设计的内容到最后往往是无用的。</p>\n<p>多用标准库实现。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li>Dustin, Boswell, Trevor, 等. 编写可读代码的艺术 [M]. 机械工业出版社, 2012.</li>\n</ul>\n","categories":[{"name":"其他","slug":"其他","count":4,"path":"api/categories/其他.json"}],"tags":[{"name":"其他","slug":"其他","count":6,"path":"api/tags/其他.json"}]}