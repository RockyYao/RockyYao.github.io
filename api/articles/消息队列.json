{"title":"mq","slug":"消息队列","date":"2018-07-20T02:49:41.000Z","updated":"2018-09-26T07:53:18.692Z","comments":true,"path":"api/articles/消息队列.json","photos":[],"link":"","excerpt":"一、消息模型点对点发布/订阅二、使用场景异步处理流量削锋应用解耦三、可靠性发送端的可靠性接收端的可靠性参考资料","covers":["../pics//685a692f-8f76-4cac-baac-b68e2df9a30f.jpg","../pics//ddb5ff4c-4ada-46aa-9bf1-140bdb5e4676.jpg","../pics//bee1ff1d-c80f-4b3c-b58c-7073a8896ab2.jpg"],"content":"<!-- GFM-TOC -->\n<ul>\n<li><a href=\"#一消息模型\">一、消息模型</a><ul>\n<li><a href=\"#点对点\">点对点</a></li>\n<li><a href=\"#发布订阅\">发布/订阅</a></li>\n</ul>\n</li>\n<li><a href=\"#二使用场景\">二、使用场景</a><ul>\n<li><a href=\"#异步处理\">异步处理</a></li>\n<li><a href=\"#流量削锋\">流量削锋</a></li>\n<li><a href=\"#应用解耦\">应用解耦</a></li>\n</ul>\n</li>\n<li><a href=\"#三可靠性\">三、可靠性</a><ul>\n<li><a href=\"#发送端的可靠性\">发送端的可靠性</a></li>\n<li><a href=\"#接收端的可靠性\">接收端的可靠性</a></li>\n</ul>\n</li>\n<li><a href=\"#参考资料\">参考资料</a><!-- GFM-TOC -->\n<a id=\"more\"></a>\n</li>\n</ul>\n<h1 id=\"一、消息模型\"><a href=\"#一、消息模型\" class=\"headerlink\" title=\"一、消息模型\"></a>一、消息模型</h1><h2 id=\"点对点\"><a href=\"#点对点\" class=\"headerlink\" title=\"点对点\"></a>点对点</h2><p>消息生产者向消息队列中发送了一个消息之后，只能被一个消费者消费一次。</p>\n<p><div align=\"center\"> <img src=\"../pics//685a692f-8f76-4cac-baac-b68e2df9a30f.jpg\"> </div><br></p>\n<h2 id=\"发布-订阅\"><a href=\"#发布-订阅\" class=\"headerlink\" title=\"发布/订阅\"></a>发布/订阅</h2><p>消息生产者向频道发送一个消息之后，多个消费者可以从该频道订阅到这条消息并消费。</p>\n<p><div align=\"center\"> <img src=\"../pics//ddb5ff4c-4ada-46aa-9bf1-140bdb5e4676.jpg\"> </div><br></p>\n<p>发布与订阅模式和观察者模式有以下不同：</p>\n<ul>\n<li>观察者模式中，观察者和主题都知道对方的存在；而在发布与订阅模式中，发布者与订阅者不知道对方的存在，它们之间通过频道进行通信。</li>\n<li>观察者模式是同步的，当事件触发时，主题会调用观察者的方法，然后等待方法返回；而发布与订阅模式是异步的，发布者向频道发送一个消息之后，就不需要关心订阅者何时去订阅这个消息，可以立即返回。</li>\n</ul>\n<p><div align=\"center\"> <img src=\"../pics//bee1ff1d-c80f-4b3c-b58c-7073a8896ab2.jpg\"> </div><br></p>\n<h1 id=\"二、使用场景\"><a href=\"#二、使用场景\" class=\"headerlink\" title=\"二、使用场景\"></a>二、使用场景</h1><h2 id=\"异步处理\"><a href=\"#异步处理\" class=\"headerlink\" title=\"异步处理\"></a>异步处理</h2><p>发送者将消息发送给消息队列之后，不需要同步等待消息接收者处理完毕，而是立即返回进行其它操作。消息接收者从消息队列中订阅消息之后异步处理。</p>\n<p>例如在注册流程中通常需要发送验证邮件来确保注册用户身份的合法性，可以使用消息队列使发送验证邮件的操作异步处理，用户在填写完注册信息之后就可以完成注册，而将发送验证邮件这一消息发送到消息队列中。</p>\n<p>只有在业务流程允许异步处理的情况下才能这么做，例如上面的注册流程中，如果要求用户对验证邮件进行点击之后才能完成注册的话，就不能再使用消息队列。</p>\n<h2 id=\"流量削锋\"><a href=\"#流量削锋\" class=\"headerlink\" title=\"流量削锋\"></a>流量削锋</h2><p>在高并发的场景下，如果短时间有大量的请求到达会压垮服务器。</p>\n<p>可以将请求发送到消息队列中，服务器按照其处理能力从消息队列中订阅消息进行处理。</p>\n<h2 id=\"应用解耦\"><a href=\"#应用解耦\" class=\"headerlink\" title=\"应用解耦\"></a>应用解耦</h2><p>如果模块之间不直接进行调用，模块之间耦合度就会很低，那么修改一个模块或者新增一个模块对其它模块的影响会很小，从而实现可扩展性。</p>\n<p>通过使用消息队列，一个模块只需要向消息队列中发送消息，其它模块可以选择性地从消息队列中订阅消息从而完成调用。</p>\n<h1 id=\"三、可靠性\"><a href=\"#三、可靠性\" class=\"headerlink\" title=\"三、可靠性\"></a>三、可靠性</h1><h2 id=\"发送端的可靠性\"><a href=\"#发送端的可靠性\" class=\"headerlink\" title=\"发送端的可靠性\"></a>发送端的可靠性</h2><p>发送端完成操作后一定能将消息成功发送到消息队列中。</p>\n<p>实现方法：</p>\n<ul>\n<li>在本地数据库建一张消息表，将消息数据与业务数据保存在同一数据库实例里，这样就可以利用本地数据库的事务机制。事务提交成功后，将消息表中的消息转移到消息队列中，若转移消息成功则删除消息表中的数据，否则继续重传。</li>\n</ul>\n<h2 id=\"接收端的可靠性\"><a href=\"#接收端的可靠性\" class=\"headerlink\" title=\"接收端的可靠性\"></a>接收端的可靠性</h2><p>接收端能够从消息队列成功消费一次消息。</p>\n<p>两种实现方法：</p>\n<ul>\n<li>保证接收端处理消息的业务逻辑具有幂等性：只要具有幂等性，那么消费多少次消息，最后处理的结果都是一样的。</li>\n<li>保证消息具有唯一编号，并使用一张日志表来记录已经消费的消息编号。</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"http://developers-club.com/posts/270339/\" target=\"_blank\" rel=\"noopener\">Observer vs Pub-Sub</a></li>\n<li><a href=\"https://blog.csdn.net/lizhitao/article/details/47723105\" target=\"_blank\" rel=\"noopener\">消息队列中点对点与发布订阅区别</a></li>\n</ul>\n","categories":[{"name":"mq","slug":"mq","count":1,"path":"api/categories/mq.json"}],"tags":[{"name":"mq","slug":"mq","count":1,"path":"api/tags/mq.json"}]}