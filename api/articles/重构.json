{"title":"重构","slug":"重构","date":"2018-07-20T02:49:41.000Z","updated":"2018-09-26T07:53:26.675Z","comments":true,"path":"api/articles/重构.json","photos":[],"link":"","excerpt":"一、第一个案例二、重构原则定义为何重构三次法则间接层与重构修改接口何时不该重构重构与设计重构与性能三、代码的坏味道1. 重复代码2. 过长函数3. 过大的类4. 过长的参数列表5. 发散式变化6. 散弹式修改7. 依恋情结8. 数据泥团9. 基本类型偏执10. switch 惊悚现身11. 平行继承体系12. 冗余类13. 夸夸其谈未来性14. 令人迷惑的暂时字段15. 过度耦合的消息链16. 中间人17. 狎昵关系18. 异曲同工的类19. 不完美的类库20. 幼稚的数据类21. 被拒绝的馈赠22. 过多的注释四、构筑测试体系五、重新组织函数1. 提炼函数2. 内联函数3. 内联临时变量4. 以查询取代临时变量5. 引起解释变量6. 分解临时变量7. 移除对参数的赋值8. 以函数对象取代函数9. 替换算法六、在对象之间搬移特性1. 搬移函数2. 搬移字段3. 提炼类4. 将类内联化5. 隐藏委托关系6. 移除中间人7. 引入外加函数8. 引入本地扩展七、重新组织数据1. 自封装字段2. 以对象取代数据值3. 将值对象改成引用对象4. 将引用对象改为值对象5. 以对象取代数组6. 赋值被监视数据7. 将单向关联改为双向关联8. 将双向关联改为单向关联9. 以字面常量取代魔法数10. 封装字段11. 封装集合12. 以数据类取代记录13. 以类取代类型码14. 以子类取代类型码15. 以 State/Strategy 取代类型码16. 以字段取代子类八、简化条件表达式1. 分解条件表达式2. 合并条件表达式3. 合并重复的条件片段4. 移除控制标记5. 以卫语句取代嵌套条件表达式6. 以多态取代条件表达式7. 引入 Null 对象8. 引入断言九、简化函数调用1. 函数改名2. 添加参数3. 移除参数4. 将查询函数和修改函数分离5. 令函数携带参数6. 以明确函数取代参数7. 保持对象完整8. 以函数取代参数9. 引入参数对象10. 移除设值函数11. 隐藏函数12. 以工厂函数取代构造函数13. 封装向下转型14. 以异常取代错误码15. 以测试取代异常十、处理概括关系1. 字段上移2. 函数上移3. 构造函数本体上移4. 函数下移5. 字段下移6. 提炼子类7. 提炼超类8. 提炼接口9. 折叠继承体系10. 塑造模板函数11. 以委托取代继承12. 以继承取代委托重构练习参考资料","covers":["../pics//c2f0c8e2-da66-498c-a38f-e1176abee29e.png","../pics//41026c79-dfc1-40f7-85ae-062910fd272b.png","../pics//8c0b3ae1-1087-46f4-8637-8d46b4ae659c.png","../pics//5b910141-08b6-442d-a4bc-a1608458c636.png","../pics//3ca58a41-8794-49c1-992e-de5d579a50d1.png","../pics//e024bd7e-fb4e-4239-9451-9a6227f50b00.jpg","../pics//27c2e0b3-8f95-453d-bedc-6398a8566ce9.jpg","../pics//c41d3977-e0e7-4ee4-93e1-d84f1ae3e20e.jpg","../pics//81fd1d6f-a3b2-4160-9a0a-1f7cb50ba440.jpg","../pics//f2e0cee9-ecdc-4a96-853f-d9f6a1ad6ad1.jpg","../pics//1c8432c8-2552-457f-b117-1da36c697221.jpg","../pics//08738dd0-ae8e-404a-ba78-a6b1b7d225b3.jpg"],"content":"<!-- GFM-TOC -->\n<ul>\n<li><a href=\"#一第一个案例\">一、第一个案例</a></li>\n<li><a href=\"#二重构原则\">二、重构原则</a><ul>\n<li><a href=\"#定义\">定义</a></li>\n<li><a href=\"#为何重构\">为何重构</a></li>\n<li><a href=\"#三次法则\">三次法则</a></li>\n<li><a href=\"#间接层与重构\">间接层与重构</a></li>\n<li><a href=\"#修改接口\">修改接口</a></li>\n<li><a href=\"#何时不该重构\">何时不该重构</a></li>\n<li><a href=\"#重构与设计\">重构与设计</a></li>\n<li><a href=\"#重构与性能\">重构与性能</a></li>\n</ul>\n</li>\n<li><a href=\"#三代码的坏味道\">三、代码的坏味道</a><ul>\n<li><a href=\"#1-重复代码\">1. 重复代码</a></li>\n<li><a href=\"#2-过长函数\">2. 过长函数</a></li>\n<li><a href=\"#3-过大的类\">3. 过大的类</a></li>\n<li><a href=\"#4-过长的参数列表\">4. 过长的参数列表</a></li>\n<li><a href=\"#5-发散式变化\">5. 发散式变化</a></li>\n<li><a href=\"#6-散弹式修改\">6. 散弹式修改</a></li>\n<li><a href=\"#7-依恋情结\">7. 依恋情结</a></li>\n<li><a href=\"#8-数据泥团\">8. 数据泥团</a></li>\n<li><a href=\"#9-基本类型偏执\">9. 基本类型偏执</a></li>\n<li><a href=\"#10-switch-惊悚现身\">10. switch 惊悚现身</a></li>\n<li><a href=\"#11-平行继承体系\">11. 平行继承体系</a></li>\n<li><a href=\"#12-冗余类\">12. 冗余类</a></li>\n<li><a href=\"#13-夸夸其谈未来性\">13. 夸夸其谈未来性</a></li>\n<li><a href=\"#14-令人迷惑的暂时字段\">14. 令人迷惑的暂时字段</a></li>\n<li><a href=\"#15-过度耦合的消息链\">15. 过度耦合的消息链</a></li>\n<li><a href=\"#16-中间人\">16. 中间人</a></li>\n<li><a href=\"#17-狎昵关系\">17. 狎昵关系</a></li>\n<li><a href=\"#18-异曲同工的类\">18. 异曲同工的类</a></li>\n<li><a href=\"#19-不完美的类库\">19. 不完美的类库</a></li>\n<li><a href=\"#20-幼稚的数据类\">20. 幼稚的数据类</a></li>\n<li><a href=\"#21-被拒绝的馈赠\">21. 被拒绝的馈赠</a></li>\n<li><a href=\"#22-过多的注释\">22. 过多的注释</a></li>\n</ul>\n</li>\n<li><a href=\"#四构筑测试体系\">四、构筑测试体系</a></li>\n<li><a href=\"#五重新组织函数\">五、重新组织函数</a><ul>\n<li><a href=\"#1-提炼函数\">1. 提炼函数</a></li>\n<li><a href=\"#2-内联函数\">2. 内联函数</a></li>\n<li><a href=\"#3-内联临时变量\">3. 内联临时变量</a></li>\n<li><a href=\"#4-以查询取代临时变量\">4. 以查询取代临时变量</a></li>\n<li><a href=\"#5-引起解释变量\">5. 引起解释变量</a></li>\n<li><a href=\"#6-分解临时变量\">6. 分解临时变量</a></li>\n<li><a href=\"#7-移除对参数的赋值\">7. 移除对参数的赋值</a></li>\n<li><a href=\"#8-以函数对象取代函数\">8. 以函数对象取代函数</a></li>\n<li><a href=\"#9-替换算法\">9. 替换算法</a></li>\n</ul>\n</li>\n<li><a href=\"#六在对象之间搬移特性\">六、在对象之间搬移特性</a><ul>\n<li><a href=\"#1-搬移函数\">1. 搬移函数</a></li>\n<li><a href=\"#2-搬移字段\">2. 搬移字段</a></li>\n<li><a href=\"#3-提炼类\">3. 提炼类</a></li>\n<li><a href=\"#4-将类内联化\">4. 将类内联化</a></li>\n<li><a href=\"#5-隐藏委托关系\">5. 隐藏委托关系</a></li>\n<li><a href=\"#6-移除中间人\">6. 移除中间人</a></li>\n<li><a href=\"#7-引入外加函数\">7. 引入外加函数</a></li>\n<li><a href=\"#8-引入本地扩展\">8. 引入本地扩展</a></li>\n</ul>\n</li>\n<li><a href=\"#七重新组织数据\">七、重新组织数据</a><ul>\n<li><a href=\"#1-自封装字段\">1. 自封装字段</a></li>\n<li><a href=\"#2-以对象取代数据值\">2. 以对象取代数据值</a></li>\n<li><a href=\"#3-将值对象改成引用对象\">3. 将值对象改成引用对象</a></li>\n<li><a href=\"#4-将引用对象改为值对象\">4. 将引用对象改为值对象</a></li>\n<li><a href=\"#5-以对象取代数组\">5. 以对象取代数组</a></li>\n<li><a href=\"#6-赋值被监视数据\">6. 赋值被监视数据</a></li>\n<li><a href=\"#7-将单向关联改为双向关联\">7. 将单向关联改为双向关联</a></li>\n<li><a href=\"#8-将双向关联改为单向关联\">8. 将双向关联改为单向关联</a></li>\n<li><a href=\"#9-以字面常量取代魔法数\">9. 以字面常量取代魔法数</a></li>\n<li><a href=\"#10-封装字段\">10. 封装字段</a></li>\n<li><a href=\"#11-封装集合\">11. 封装集合</a></li>\n<li><a href=\"#12-以数据类取代记录\">12. 以数据类取代记录</a></li>\n<li><a href=\"#13-以类取代类型码\">13. 以类取代类型码</a></li>\n<li><a href=\"#14-以子类取代类型码\">14. 以子类取代类型码</a></li>\n<li><a href=\"#15-以-statestrategy-取代类型码\">15. 以 State/Strategy 取代类型码</a></li>\n<li><a href=\"#16-以字段取代子类\">16. 以字段取代子类</a></li>\n</ul>\n</li>\n<li><a href=\"#八简化条件表达式\">八、简化条件表达式</a><ul>\n<li><a href=\"#1-分解条件表达式\">1. 分解条件表达式</a></li>\n<li><a href=\"#2-合并条件表达式\">2. 合并条件表达式</a></li>\n<li><a href=\"#3-合并重复的条件片段\">3. 合并重复的条件片段</a></li>\n<li><a href=\"#4-移除控制标记\">4. 移除控制标记</a></li>\n<li><a href=\"#5-以卫语句取代嵌套条件表达式\">5. 以卫语句取代嵌套条件表达式</a></li>\n<li><a href=\"#6-以多态取代条件表达式\">6. 以多态取代条件表达式</a></li>\n<li><a href=\"#7-引入-null-对象\">7. 引入 Null 对象</a></li>\n<li><a href=\"#8-引入断言\">8. 引入断言</a></li>\n</ul>\n</li>\n<li><a href=\"#九简化函数调用\">九、简化函数调用</a><ul>\n<li><a href=\"#1-函数改名\">1. 函数改名</a></li>\n<li><a href=\"#2-添加参数\">2. 添加参数</a></li>\n<li><a href=\"#3-移除参数\">3. 移除参数</a></li>\n<li><a href=\"#4-将查询函数和修改函数分离\">4. 将查询函数和修改函数分离</a></li>\n<li><a href=\"#5-令函数携带参数\">5. 令函数携带参数</a></li>\n<li><a href=\"#6-以明确函数取代参数\">6. 以明确函数取代参数</a></li>\n<li><a href=\"#7-保持对象完整\">7. 保持对象完整</a></li>\n<li><a href=\"#8-以函数取代参数\">8. 以函数取代参数</a></li>\n<li><a href=\"#9-引入参数对象\">9. 引入参数对象</a></li>\n<li><a href=\"#10-移除设值函数\">10. 移除设值函数</a></li>\n<li><a href=\"#11-隐藏函数\">11. 隐藏函数</a></li>\n<li><a href=\"#12-以工厂函数取代构造函数\">12. 以工厂函数取代构造函数</a></li>\n<li><a href=\"#13-封装向下转型\">13. 封装向下转型</a></li>\n<li><a href=\"#14-以异常取代错误码\">14. 以异常取代错误码</a></li>\n<li><a href=\"#15-以测试取代异常\">15. 以测试取代异常</a></li>\n</ul>\n</li>\n<li><a href=\"#十处理概括关系\">十、处理概括关系</a><ul>\n<li><a href=\"#1-字段上移\">1. 字段上移</a></li>\n<li><a href=\"#2-函数上移\">2. 函数上移</a></li>\n<li><a href=\"#3-构造函数本体上移\">3. 构造函数本体上移</a></li>\n<li><a href=\"#4-函数下移\">4. 函数下移</a></li>\n<li><a href=\"#5-字段下移\">5. 字段下移</a></li>\n<li><a href=\"#6-提炼子类\">6. 提炼子类</a></li>\n<li><a href=\"#7-提炼超类\">7. 提炼超类</a></li>\n<li><a href=\"#8-提炼接口\">8. 提炼接口</a></li>\n<li><a href=\"#9-折叠继承体系\">9. 折叠继承体系</a></li>\n<li><a href=\"#10-塑造模板函数\">10. 塑造模板函数</a></li>\n<li><a href=\"#11-以委托取代继承\">11. 以委托取代继承</a></li>\n<li><a href=\"#12-以继承取代委托\">12. 以继承取代委托</a></li>\n</ul>\n</li>\n<li><a href=\"#重构练习\">重构练习</a></li>\n<li><a href=\"#参考资料\">参考资料</a><!-- GFM-TOC -->\n</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"一、第一个案例\"><a href=\"#一、第一个案例\" class=\"headerlink\" title=\"一、第一个案例\"></a>一、第一个案例</h1><p>如果你发现自己需要为程序添加一个特性，而代码结构使你无法很方便地达成目的，那就先重构这个程序。</p>\n<p>在重构前，需要先构建好可靠的测试环境，确保安全地重构。</p>\n<p>重构需要以微小的步伐修改程序，如果重构过程发生错误，很容易就能发现错误。</p>\n<p><strong>案例分析</strong> </p>\n<p>影片出租店应用程序，需要计算每位顾客的消费金额。</p>\n<p>包括三个类：Movie、Rental 和 Customer。</p>\n<p><div align=\"center\"> <img src=\"../pics//c2f0c8e2-da66-498c-a38f-e1176abee29e.png\"> </div><br></p>\n<p>最开始的实现是把所有的计费代码都放在 Customer 类中。可以发现，该代码没有使用 Customer 类中的任何信息，更多的是使用 Rental 类的信息，因此第一个可以重构的点就是把具体计费的代码移到 Rental 类中，然后 Customer 类的 getTotalCharge() 方法只需要调用 Rental 类中的计费方法即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Rental&gt; rentals = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addRental</span><span class=\"params\">(Rental rental)</span> </span>&#123;</span><br><span class=\"line\">        rentals.add(rental);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getTotalCharge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> totalCharge = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Rental rental : rentals) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (rental.getMovie().getMovieType()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Movie.Type1:</span><br><span class=\"line\">                    totalCharge += rental.getDaysRented();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Movie.Type2:</span><br><span class=\"line\">                    totalCharge += rental.getDaysRented() * <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Movie.Type3:</span><br><span class=\"line\">                    totalCharge += rental.getDaysRented() * <span class=\"number\">3</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> totalCharge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rental</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> daysRented;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Movie movie;</span><br><span class=\"line\"></span><br><span class=\"line\">    Rental(<span class=\"keyword\">int</span> daysRented, Movie movie) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.daysRented = daysRented;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.movie = movie;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Movie <span class=\"title\">getMovie</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> movie;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDaysRented</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> daysRented;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Movie</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> Type1 = <span class=\"number\">0</span>, Type2 = <span class=\"number\">1</span>, Type3 = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> type;</span><br><span class=\"line\"></span><br><span class=\"line\">    Movie(<span class=\"keyword\">int</span> type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getMovieType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Customer customer = <span class=\"keyword\">new</span> Customer();</span><br><span class=\"line\">        Rental rental1 = <span class=\"keyword\">new</span> Rental(<span class=\"number\">1</span>, <span class=\"keyword\">new</span> Movie(Movie.Type1));</span><br><span class=\"line\">        Rental rental2 = <span class=\"keyword\">new</span> Rental(<span class=\"number\">2</span>, <span class=\"keyword\">new</span> Movie(Movie.Type2));</span><br><span class=\"line\">        customer.addRental(rental1);</span><br><span class=\"line\">        customer.addRental(rental2);</span><br><span class=\"line\">        System.out.println(customer.getTotalCharge());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n<p>使用 switch 的准则是：只使用 switch 所在类的数据。解释如下：switch 使用的数据通常是一组相关的数据，例如 getTotalCharge() 代码使用了 Movie 的多种类别数据。当这组类别的数据发生改变时，例如增加 Movie 的类别或者修改一种 Movie 类别的计费方法，就需要修改 switch 代码。如果违反了准则，就会有多个地方的 switch 使用了这部分的数据，那么这些 swtich 都需要进行修改，这些代码可能遍布在各个地方，修改工作往往会很难进行。上面的实现违反了这一准则，因此需要重构。</p>\n<p>以下是继承 Movie 的多态解决方案，这种方案可以解决上述的 switch 问题，因为每种电影类别的计费方式都被放到了对应 Movie 子类中，当变化发生时，只需要去修改对应子类中的代码即可。</p>\n<p><div align=\"center\"> <img src=\"../pics//41026c79-dfc1-40f7-85ae-062910fd272b.png\"> </div><br></p>\n<p>有一条设计原则指示应该多用组合少用继承，这是因为组合比继承具有更高的灵活性。例如上面的继承方案，一部电影要改变它的计费方式，就要改变它所属的类，但是对象所属的类在编译时期就确定了，无法在运行过程中改变。（运行时多态可以在运行过程中改变一个父类引用指向的子类对象，但是无法改变一个对象所属的类。）</p>\n<p>策略模式就是使用组合替代继承的一种解决方案。引入 Price 类，它有多种实现。Movie 组合了一个 Price 对象，并且在运行时可以改变组合的 Price 对象，从而使得它的计费方式发生改变。</p>\n<p><div align=\"center\"> <img src=\"../pics//8c0b3ae1-1087-46f4-8637-8d46b4ae659c.png\"> </div><br></p>\n<p>重构后整体的类图和时序图如下：</p>\n<p><div align=\"center\"> <img src=\"../pics//5b910141-08b6-442d-a4bc-a1608458c636.png\"> </div><br></p>\n<p><div align=\"center\"> <img src=\"../pics//3ca58a41-8794-49c1-992e-de5d579a50d1.png\"> </div><br></p>\n<p>重构后的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Rental&gt; rentals = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addRental</span><span class=\"params\">(Rental rental)</span> </span>&#123;</span><br><span class=\"line\">        rentals.add(rental);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getTotalCharge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> totalCharge = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Rental rental : rentals) &#123;</span><br><span class=\"line\">            totalCharge += rental.getCharge();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> totalCharge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rental</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> daysRented;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Movie movie;</span><br><span class=\"line\"></span><br><span class=\"line\">    Rental(<span class=\"keyword\">int</span> daysRented, Movie movie) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.daysRented = daysRented;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.movie = movie;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getCharge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> daysRented * movie.getCharge();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Price</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getCharge</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Price1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Price</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getCharge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Price2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Price</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getCharge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Price3</span> <span class=\"keyword\">implements</span> <span class=\"title\">Price</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getCharge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Movie</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Price price;</span><br><span class=\"line\"></span><br><span class=\"line\">    Movie(Price price) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getCharge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price.getCharge();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Customer customer = <span class=\"keyword\">new</span> Customer();</span><br><span class=\"line\">        Rental rental1 = <span class=\"keyword\">new</span> Rental(<span class=\"number\">1</span>, <span class=\"keyword\">new</span> Movie(<span class=\"keyword\">new</span> Price1()));</span><br><span class=\"line\">        Rental rental2 = <span class=\"keyword\">new</span> Rental(<span class=\"number\">2</span>, <span class=\"keyword\">new</span> Movie(<span class=\"keyword\">new</span> Price2()));</span><br><span class=\"line\">        customer.addRental(rental1);</span><br><span class=\"line\">        customer.addRental(rental2);</span><br><span class=\"line\">        System.out.println(customer.getTotalCharge());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、重构原则\"><a href=\"#二、重构原则\" class=\"headerlink\" title=\"二、重构原则\"></a>二、重构原则</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>重构是对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。</p>\n<h2 id=\"为何重构\"><a href=\"#为何重构\" class=\"headerlink\" title=\"为何重构\"></a>为何重构</h2><ul>\n<li>改进软件设计</li>\n<li>使软件更容易理解</li>\n<li>帮助找到 Bug</li>\n<li>提高编程速度</li>\n</ul>\n<h2 id=\"三次法则\"><a href=\"#三次法则\" class=\"headerlink\" title=\"三次法则\"></a>三次法则</h2><p>第一次做某件事时只管去做；第二次做类似事情时可以去做；第三次再做类似的事，就应该重构。</p>\n<h2 id=\"间接层与重构\"><a href=\"#间接层与重构\" class=\"headerlink\" title=\"间接层与重构\"></a>间接层与重构</h2><p>计算机科学中的很多问题可以通过增加一个间接层来解决，间接层具有以下价值：</p>\n<ul>\n<li>允许逻辑共享</li>\n<li>分开解释意图和实现</li>\n<li>隔离变化</li>\n<li>封装条件逻辑</li>\n</ul>\n<p>重构可以理解为在适当的位置插入间接层以及在不需要时移除间接层。</p>\n<h2 id=\"修改接口\"><a href=\"#修改接口\" class=\"headerlink\" title=\"修改接口\"></a>修改接口</h2><p>如果重构手法改变了已发布的接口，就必须维护新旧两个接口。可以保留旧接口，让旧接口去调用新接口，并且使用 Java 提供的 @deprecation 将旧接口标记为弃用。</p>\n<p>可见修改接口特别麻烦，因此除非真有必要，否则不要发布接口，并且不要过早发布接口。</p>\n<h2 id=\"何时不该重构\"><a href=\"#何时不该重构\" class=\"headerlink\" title=\"何时不该重构\"></a>何时不该重构</h2><p>当现有代码过于混乱时，应当重写而不是重构。</p>\n<p>一个折中的办法是，将代码封装成一个个组件，然后对各个组件做重写或者重构的决定。</p>\n<h2 id=\"重构与设计\"><a href=\"#重构与设计\" class=\"headerlink\" title=\"重构与设计\"></a>重构与设计</h2><p>软件开发无法预先设计，因为开发过程有很多变化发生，在最开始不可能都把所有情况考虑进去。</p>\n<p>重构可以简化设计，重构在一个简单的设计上进行修修改改，当变化发生时，以一种灵活的方式去应对变化，进而带来更好的设计。</p>\n<h2 id=\"重构与性能\"><a href=\"#重构与性能\" class=\"headerlink\" title=\"重构与性能\"></a>重构与性能</h2><p>为了软代码更容易理解，重构可能会导致性能减低。</p>\n<p>在编写代码时，不用对性能过多关注，只有在最后性能优化阶段再考虑性能问题。</p>\n<p>应当只关注关键代码的性能，并且只有一小部分的代码是关键代码。</p>\n<h1 id=\"三、代码的坏味道\"><a href=\"#三、代码的坏味道\" class=\"headerlink\" title=\"三、代码的坏味道\"></a>三、代码的坏味道</h1><p>本章主要介绍一些不好的代码，也就是说这些代码应该被重构。</p>\n<h2 id=\"1-重复代码\"><a href=\"#1-重复代码\" class=\"headerlink\" title=\"1. 重复代码\"></a>1. 重复代码</h2><blockquote>\n<p>Duplicated Code</p>\n</blockquote>\n<p>同一个类的两个函数有相同表达式，则用 Extract Method 提取出重复代码；</p>\n<p>两个互为兄弟的子类含有相同的表达式，先使用 Extract Method，然后把提取出来的函数 Pull Up Method 推入超类。</p>\n<p>如果只是部分相同，用 Extract Method 分离出相似部分和差异部分，然后使用 Form Template Method 这种模板方法设计模式。</p>\n<p>如果两个毫不相关的类出现重复代码，则使用 Extract Class 方法将重复代码提取到一个独立类中。</p>\n<h2 id=\"2-过长函数\"><a href=\"#2-过长函数\" class=\"headerlink\" title=\"2. 过长函数\"></a>2. 过长函数</h2><blockquote>\n<p>Long Method</p>\n</blockquote>\n<p>函数应该尽可能小，因为小函数具有解释能力、共享能力、选择能力。</p>\n<p>分解长函数的原则：当需要用注释来说明一段代码时，就需要把这部分代码写入一个独立的函数中。</p>\n<p>Extract Method 会把很多参数和临时变量都当做参数，可以用 Replace Temp with Query 消除临时变量，Introduce Parameter Object 和 Preserve Whole Object 可以将过长的参数列变得更简洁。</p>\n<p>条件和循环语句往往也需要提取到新的函数中。</p>\n<h2 id=\"3-过大的类\"><a href=\"#3-过大的类\" class=\"headerlink\" title=\"3. 过大的类\"></a>3. 过大的类</h2><blockquote>\n<p>Large Class</p>\n</blockquote>\n<p>应该尽可能让一个类只做一件事，而过大的类做了过多事情，需要使用 Extract Class 或 Extract Subclass。</p>\n<p>先确定客户端如何使用该类，然后运用 Extract Interface 为每一种使用方式提取出一个接口。</p>\n<h2 id=\"4-过长的参数列表\"><a href=\"#4-过长的参数列表\" class=\"headerlink\" title=\"4. 过长的参数列表\"></a>4. 过长的参数列表</h2><blockquote>\n<p>Long Parameter List</p>\n</blockquote>\n<p>太长的参数列表往往会造成前后不一致，不易使用。</p>\n<p>面向对象程序中，函数所需要的数据通常能在宿主类中找到。</p>\n<h2 id=\"5-发散式变化\"><a href=\"#5-发散式变化\" class=\"headerlink\" title=\"5. 发散式变化\"></a>5. 发散式变化</h2><blockquote>\n<p>Divergent Change</p>\n</blockquote>\n<p>设计原则：一个类应该只有一个引起改变的原因。也就是说，针对某一外界变化所有相应的修改，都只应该发生在单一类中。</p>\n<p>针对某种原因的变化，使用 Extract Class 将它提炼到一个类中。</p>\n<h2 id=\"6-散弹式修改\"><a href=\"#6-散弹式修改\" class=\"headerlink\" title=\"6. 散弹式修改\"></a>6. 散弹式修改</h2><blockquote>\n<p>Shotgun Surgery</p>\n</blockquote>\n<p>一个变化引起多个类修改。</p>\n<p>使用 Move Method 和 Move Field 把所有需要修改的代码放到同一个类中。</p>\n<h2 id=\"7-依恋情结\"><a href=\"#7-依恋情结\" class=\"headerlink\" title=\"7. 依恋情结\"></a>7. 依恋情结</h2><blockquote>\n<p>Feature Envy</p>\n</blockquote>\n<p>一个函数对某个类的兴趣高于对自己所处类的兴趣，通常是过多访问其它类的数据，</p>\n<p>使用 Move Method 将它移到该去的地方，如果对多个类都有 Feature Envy，先用 Extract Method 提取出多个函数。</p>\n<h2 id=\"8-数据泥团\"><a href=\"#8-数据泥团\" class=\"headerlink\" title=\"8. 数据泥团\"></a>8. 数据泥团</h2><blockquote>\n<p>Data Clumps</p>\n</blockquote>\n<p>有些数据经常一起出现，比如两个类具有相同的字段、许多函数有相同的参数，这些绑定在一起出现的数据应该拥有属于它们自己的对象。</p>\n<p>使用 Extract Class 将它们放在一起。</p>\n<h2 id=\"9-基本类型偏执\"><a href=\"#9-基本类型偏执\" class=\"headerlink\" title=\"9. 基本类型偏执\"></a>9. 基本类型偏执</h2><blockquote>\n<p>Primitive Obsession</p>\n</blockquote>\n<p>使用类往往比使用基本类型更好，使用 Replace Data Value with Object 将数据值替换为对象。</p>\n<h2 id=\"10-switch-惊悚现身\"><a href=\"#10-switch-惊悚现身\" class=\"headerlink\" title=\"10. switch 惊悚现身\"></a>10. switch 惊悚现身</h2><blockquote>\n<p>Switch Statements</p>\n</blockquote>\n<p>具体参见第一章的案例。</p>\n<h2 id=\"11-平行继承体系\"><a href=\"#11-平行继承体系\" class=\"headerlink\" title=\"11. 平行继承体系\"></a>11. 平行继承体系</h2><blockquote>\n<p>Parallel Inheritance Hierarchies</p>\n</blockquote>\n<p>每当为某个类增加一个子类，必须也为另一个类相应增加一个子类。</p>\n<p>这种结果会带来一些重复性，消除重复性的一般策略：让一个继承体系的实例引用另一个继承体系的实例。</p>\n<h2 id=\"12-冗余类\"><a href=\"#12-冗余类\" class=\"headerlink\" title=\"12. 冗余类\"></a>12. 冗余类</h2><blockquote>\n<p>Lazy Class</p>\n</blockquote>\n<p>如果一个类没有做足够多的工作，就应该消失。</p>\n<h2 id=\"13-夸夸其谈未来性\"><a href=\"#13-夸夸其谈未来性\" class=\"headerlink\" title=\"13. 夸夸其谈未来性\"></a>13. 夸夸其谈未来性</h2><blockquote>\n<p>Speculative Generality</p>\n</blockquote>\n<p>有些内容是用来处理未来可能发生的变化，但是往往会造成系统难以理解和维护，并且预测未来可能发生的改变很可能和最开始的设想相反。因此，如果不是必要，就不要这么做。</p>\n<h2 id=\"14-令人迷惑的暂时字段\"><a href=\"#14-令人迷惑的暂时字段\" class=\"headerlink\" title=\"14. 令人迷惑的暂时字段\"></a>14. 令人迷惑的暂时字段</h2><blockquote>\n<p>Temporary Field</p>\n</blockquote>\n<p>某个字段仅为某种特定情况而设，这样的代码不易理解，因为通常认为对象在所有时候都需要它的所有字段。</p>\n<p>把这种字段和特定情况的处理操作使用 Extract Class 提炼到一个独立类中。</p>\n<h2 id=\"15-过度耦合的消息链\"><a href=\"#15-过度耦合的消息链\" class=\"headerlink\" title=\"15. 过度耦合的消息链\"></a>15. 过度耦合的消息链</h2><blockquote>\n<p>Message Chains</p>\n</blockquote>\n<p>一个对象请求另一个对象，然后再向后者请求另一个对象，然后…，这就是消息链。采用这种方式，意味着客户代码将与对象间的关系紧密耦合。</p>\n<p>改用函数链，用函数委托另一个对象来处理。</p>\n<h2 id=\"16-中间人\"><a href=\"#16-中间人\" class=\"headerlink\" title=\"16. 中间人\"></a>16. 中间人</h2><blockquote>\n<p> Middle Man</p>\n</blockquote>\n<p>中间人负责处理委托给它的操作，如果一个类中有过多的函数都委托给其它类，那就是过度运用委托，应当 Remove Middle Man，直接与负责的对象打交道。</p>\n<h2 id=\"17-狎昵关系\"><a href=\"#17-狎昵关系\" class=\"headerlink\" title=\"17. 狎昵关系\"></a>17. 狎昵关系</h2><blockquote>\n<p>Inappropriate Intimacy</p>\n</blockquote>\n<p>两个类多于亲密，花费太多时间去探讨彼此的 private 成分。</p>\n<h2 id=\"18-异曲同工的类\"><a href=\"#18-异曲同工的类\" class=\"headerlink\" title=\"18. 异曲同工的类\"></a>18. 异曲同工的类</h2><blockquote>\n<p>Alernative Classes with Different Interfaces</p>\n</blockquote>\n<p>两个函数做同一件事，却有着不同的签名。</p>\n<p>使用 Rename Method 根据它们的用途重新命名。</p>\n<h2 id=\"19-不完美的类库\"><a href=\"#19-不完美的类库\" class=\"headerlink\" title=\"19. 不完美的类库\"></a>19. 不完美的类库</h2><blockquote>\n<p>Incomplete Library Class</p>\n</blockquote>\n<p>类库的设计者不可能设计出完美的类库，当我们需要对类库进行一些修改时，可以使用以下两种方法：如果只是修改一两个函数，使用 Introduce Foreign Method；如果要添加一大堆额外行为，使用 Introduce Local Extension。</p>\n<h2 id=\"20-幼稚的数据类\"><a href=\"#20-幼稚的数据类\" class=\"headerlink\" title=\"20. 幼稚的数据类\"></a>20. 幼稚的数据类</h2><blockquote>\n<p>Data Class</p>\n</blockquote>\n<p>它只拥有一些数据字段，以及用于访问这些字段的函数，除此之外一无长物。</p>\n<p>找出字段使用的地方，然后把相应的操作移到 Data Class 中。</p>\n<h2 id=\"21-被拒绝的馈赠\"><a href=\"#21-被拒绝的馈赠\" class=\"headerlink\" title=\"21. 被拒绝的馈赠\"></a>21. 被拒绝的馈赠</h2><blockquote>\n<p>Refused Bequest</p>\n</blockquote>\n<p>子类不想继承超类的所有函数和数据。</p>\n<p>为子类新建一个兄弟类，不需要的函数或数据使用 Push Down Method 和 Push Down Field 下推给那个兄弟。</p>\n<h2 id=\"22-过多的注释\"><a href=\"#22-过多的注释\" class=\"headerlink\" title=\"22. 过多的注释\"></a>22. 过多的注释</h2><blockquote>\n<p>Comments</p>\n</blockquote>\n<p>使用 Extract Method 提炼出需要注释的部分，然后用函数名来解释函数的行为。</p>\n<h1 id=\"四、构筑测试体系\"><a href=\"#四、构筑测试体系\" class=\"headerlink\" title=\"四、构筑测试体系\"></a>四、构筑测试体系</h1><p>Java 可以使用 Junit 进行单元测试。</p>\n<p>测试应该能够完全自动化，并能检查测试的结果。</p>\n<p>小步修改，频繁测试。</p>\n<p>单元测试的对象是类的方法，而功能测是以客户的角度保证软件正常运行。</p>\n<p>应当集中测试可能出错的边界条件。</p>\n<h1 id=\"五、重新组织函数\"><a href=\"#五、重新组织函数\" class=\"headerlink\" title=\"五、重新组织函数\"></a>五、重新组织函数</h1><h2 id=\"1-提炼函数\"><a href=\"#1-提炼函数\" class=\"headerlink\" title=\"1. 提炼函数\"></a>1. 提炼函数</h2><blockquote>\n<p>Extract Method</p>\n</blockquote>\n<p>将这段代码放进一个独立函数中，并让函数名称解释该函数的用途。</p>\n<h2 id=\"2-内联函数\"><a href=\"#2-内联函数\" class=\"headerlink\" title=\"2. 内联函数\"></a>2. 内联函数</h2><blockquote>\n<p>Inline Method</p>\n</blockquote>\n<p>一个函数的本体与名称同样清楚易懂。</p>\n<p>在函数调用点插入函数本体，然后移除该函数。</p>\n<h2 id=\"3-内联临时变量\"><a href=\"#3-内联临时变量\" class=\"headerlink\" title=\"3. 内联临时变量\"></a>3. 内联临时变量</h2><blockquote>\n<p>Inline Temp</p>\n</blockquote>\n<p>一个临时变量，只被简单表达式赋值一次，而它妨碍了其它重构手法。</p>\n<p>将所有对该变量的引用替换为对它赋值的那个表达式自身。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> basePrice = anOrder.basePrice();</span><br><span class=\"line\"><span class=\"keyword\">return</span> basePrice &gt; <span class=\"number\">1000</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> anOrder.basePrice() &gt; <span class=\"number\">1000</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-以查询取代临时变量\"><a href=\"#4-以查询取代临时变量\" class=\"headerlink\" title=\"4. 以查询取代临时变量\"></a>4. 以查询取代临时变量</h2><blockquote>\n<p>Replace Temp with Query</p>\n</blockquote>\n<p>以临时变量保存某一表达式的运算结果，将这个表达式提炼到一个独立函数中，将所有对临时变量的引用点替换为对新函数的调用。</p>\n<p>Replace Temp with Query 往往是 Extract Method 之前必不可少的一个步骤，因为局部变量会使代码难以提炼。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> basePrice = quantity * itemPrice;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (basePrice &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> basePrice * <span class=\"number\">0.95</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> basePrice * <span class=\"number\">0.98</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (basePrice() &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> basePrice() * <span class=\"number\">0.95</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> basePrice() * <span class=\"number\">0.98</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">basePrice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quantity * itemPrice;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-引起解释变量\"><a href=\"#5-引起解释变量\" class=\"headerlink\" title=\"5. 引起解释变量\"></a>5. 引起解释变量</h2><blockquote>\n<p>Introduce Explaining Variable</p>\n</blockquote>\n<p>将复杂表达式（或其中一部分）的结果放进一个临时变量， 以此变量名称来解释表达式用途。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ((platform.toUpperCase().indexOf(<span class=\"string\">\"MAC\"</span>) &gt; -<span class=\"number\">1</span>) &amp;&amp;</span><br><span class=\"line\">  (browser.toUpperCase().indexOf(<span class=\"string\">\"IE\"</span>) &gt; -<span class=\"number\">1</span>) &amp;&amp;</span><br><span class=\"line\">  wasInitialized() &amp;&amp; resize &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isMacOS = platform.toUpperCase().indexOf(<span class=\"string\">\"MAC\"</span>) &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isIEBrower = browser.toUpperCase().indexOf(<span class=\"string\">\"IE\"</span>) &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> wasResized = resize &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isMacOS &amp;&amp; isIEBrower &amp;&amp; wasInitialized() &amp;&amp; wasResized) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-分解临时变量\"><a href=\"#6-分解临时变量\" class=\"headerlink\" title=\"6. 分解临时变量\"></a>6. 分解临时变量</h2><blockquote>\n<p>Split Temporary Variable</p>\n</blockquote>\n<p>某个临时变量被赋值超过一次，它既不是循环变量，也不是用于收集计算结果。</p>\n<p>针对每次赋值，创造一个独立、对应的临时变量，每个临时变量只承担一个责任。</p>\n<h2 id=\"7-移除对参数的赋值\"><a href=\"#7-移除对参数的赋值\" class=\"headerlink\" title=\"7. 移除对参数的赋值\"></a>7. 移除对参数的赋值</h2><blockquote>\n<p> Remove Assigments to Parameters</p>\n</blockquote>\n<p>以一个临时变量取代对该参数的赋值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">discount</span> <span class=\"params\">(<span class=\"keyword\">int</span> inputVal, <span class=\"keyword\">int</span> quentity, <span class=\"keyword\">int</span> yearToDate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inputVal &gt; <span class=\"number\">50</span>) inputVal -= <span class=\"number\">2</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">discount</span> <span class=\"params\">(<span class=\"keyword\">int</span> inputVal, <span class=\"keyword\">int</span> quentity, <span class=\"keyword\">int</span> yearToDate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = inputVal;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inputVal &gt; <span class=\"number\">50</span>) result -= <span class=\"number\">2</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-以函数对象取代函数\"><a href=\"#8-以函数对象取代函数\" class=\"headerlink\" title=\"8. 以函数对象取代函数\"></a>8. 以函数对象取代函数</h2><blockquote>\n<p>Replace Method with Method Object</p>\n</blockquote>\n<p>当对一个大型函数采用 Extract Method 时，由于包含了局部变量使得很难进行该操作。</p>\n<p>将这个函数放进一个单独对象中，如此一来局部变量就成了对象内的字段。然后可以在同一个对象中将这个大型函数分解为多个小型函数。</p>\n<h2 id=\"9-替换算法\"><a href=\"#9-替换算法\" class=\"headerlink\" title=\"9. 替换算法\"></a>9. 替换算法</h2><blockquote>\n<p>Subsititute Algorithn</p>\n</blockquote>\n<h1 id=\"六、在对象之间搬移特性\"><a href=\"#六、在对象之间搬移特性\" class=\"headerlink\" title=\"六、在对象之间搬移特性\"></a>六、在对象之间搬移特性</h1><h2 id=\"1-搬移函数\"><a href=\"#1-搬移函数\" class=\"headerlink\" title=\"1. 搬移函数\"></a>1. 搬移函数</h2><blockquote>\n<p>Move Method</p>\n</blockquote>\n<p>类中的某个函数与另一个类进行更多交流：调用后者或者被后者调用。</p>\n<p>将这个函数搬移到另一个类中。</p>\n<h2 id=\"2-搬移字段\"><a href=\"#2-搬移字段\" class=\"headerlink\" title=\"2. 搬移字段\"></a>2. 搬移字段</h2><blockquote>\n<p>Move Field</p>\n</blockquote>\n<p>类中的某个字段被另一个类更多地用到，这里的用到是指调用取值设值函数，应当把该字段移到另一个类中。</p>\n<h2 id=\"3-提炼类\"><a href=\"#3-提炼类\" class=\"headerlink\" title=\"3. 提炼类\"></a>3. 提炼类</h2><blockquote>\n<p>Extract Class</p>\n</blockquote>\n<p>某个类做了应当由两个类做的事。</p>\n<p>应当建立一个新类，将相关的字段和函数从旧类搬移到新类。</p>\n<h2 id=\"4-将类内联化\"><a href=\"#4-将类内联化\" class=\"headerlink\" title=\"4. 将类内联化\"></a>4. 将类内联化</h2><blockquote>\n<p>Inline Class</p>\n</blockquote>\n<p>与 Extract Class 相反。</p>\n<h2 id=\"5-隐藏委托关系\"><a href=\"#5-隐藏委托关系\" class=\"headerlink\" title=\"5. 隐藏委托关系\"></a>5. 隐藏委托关系</h2><blockquote>\n<p>Hide Delegate</p>\n</blockquote>\n<p>建立所需的函数，隐藏委托关系。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    Department department;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Department <span class=\"title\">getDepartment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> department;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Department</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Person manager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">getManager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> manager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果客户希望知道某人的经理是谁，必须获得 Department 对象，这样就对客户揭露了 Department 的工作原理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person manager = john.getDepartment().getManager();</span><br></pre></td></tr></table></figure>\n<p>通过为 Peron 建立一个函数来隐藏这种委托关系。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">getManager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> department.getManager();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-移除中间人\"><a href=\"#6-移除中间人\" class=\"headerlink\" title=\"6. 移除中间人\"></a>6. 移除中间人</h2><blockquote>\n<p>Remove Middle Man</p>\n</blockquote>\n<p>与 Hide Delegate 相反，本方法需要移除委托函数，让客户直接调用委托类。</p>\n<p>Hide Delegate 有很大好处，但是它的代价是：每当客户要使用受托类的新特性时，就必须在服务器端添加一个简单的委托函数。随着受委托的特性越来越多，服务器类完全变成了一个“中间人”。</p>\n<h2 id=\"7-引入外加函数\"><a href=\"#7-引入外加函数\" class=\"headerlink\" title=\"7. 引入外加函数\"></a>7. 引入外加函数</h2><blockquote>\n<p>Introduce Foreign Method</p>\n</blockquote>\n<p>需要为提供服务的类添加一个函数，但是无法修改这个类。</p>\n<p>可以在客户类中建立一个函数，并以第一参数形式传入一个服务类的实例，让客户类组合服务器实例。</p>\n<h2 id=\"8-引入本地扩展\"><a href=\"#8-引入本地扩展\" class=\"headerlink\" title=\"8. 引入本地扩展\"></a>8. 引入本地扩展</h2><blockquote>\n<p>Introduce Local Extension</p>\n</blockquote>\n<p>和 Introduce Foreign Method 目的一样，但是 Introduce Local Extension 通过建立新的类来实现。有两种方式：子类或者包装类，子类就是通过继承实现，包装类就是通过组合实现。</p>\n<h1 id=\"七、重新组织数据\"><a href=\"#七、重新组织数据\" class=\"headerlink\" title=\"七、重新组织数据\"></a>七、重新组织数据</h1><h2 id=\"1-自封装字段\"><a href=\"#1-自封装字段\" class=\"headerlink\" title=\"1. 自封装字段\"></a>1. 自封装字段</h2><blockquote>\n<p>Self Encapsulate Field</p>\n</blockquote>\n<p>为字段建立取值/设值函数，并用这些函数来访问字段。只有当子类想访问超类的一个字段，又想在子类中将对这个字段访问改为一个计算后的值，才使用这种方式，否则直接访问字段的方式简洁明了。</p>\n<h2 id=\"2-以对象取代数据值\"><a href=\"#2-以对象取代数据值\" class=\"headerlink\" title=\"2. 以对象取代数据值\"></a>2. 以对象取代数据值</h2><blockquote>\n<p>Replace Data Value with Object</p>\n</blockquote>\n<p>在开发初期，往往会用简单的数据项表示简单的情况，但是随着开发的进行，一些简单数据项会具有一些特殊行为。比如一开始会把电话号码存成字符串，但是随后发现电话号码需要“格式化”、“抽取区号”之类的特殊行为。</p>\n<h2 id=\"3-将值对象改成引用对象\"><a href=\"#3-将值对象改成引用对象\" class=\"headerlink\" title=\"3. 将值对象改成引用对象\"></a>3. 将值对象改成引用对象</h2><blockquote>\n<p>Change Value to Reference</p>\n</blockquote>\n<p>将彼此相等的实例替换为同一个对象。这就要用一个工厂来创建这种唯一对象，工厂类中需要保留一份已经创建对象的列表，当要创建一个对象时，先查找这份列表中是否已经存在该对象，如果存在，则返回列表中的这个对象；否则，新建一个对象，添加到列表中，并返回该对象。</p>\n<h2 id=\"4-将引用对象改为值对象\"><a href=\"#4-将引用对象改为值对象\" class=\"headerlink\" title=\"4. 将引用对象改为值对象\"></a>4. 将引用对象改为值对象</h2><blockquote>\n<p>Change Reference to value</p>\n</blockquote>\n<p>以 Change Value to Reference 相反。值对象有个非常重要的特性：它是不可变的，不可变表示如果要改变这个对象，必须用一个新的对象来替换旧对象，而不是修改旧对象。</p>\n<p>需要为值对象实现 equals() 和 hashCode() 方法。</p>\n<h2 id=\"5-以对象取代数组\"><a href=\"#5-以对象取代数组\" class=\"headerlink\" title=\"5. 以对象取代数组\"></a>5. 以对象取代数组</h2><blockquote>\n<p>Replace Array with Object</p>\n</blockquote>\n<p>有一个数组，其中的元素各自代表不同的东西。</p>\n<p>以对象替换数组，对于数组中的每个元素，以一个字段来表示，这样方便操作，也更容易理解。</p>\n<h2 id=\"6-赋值被监视数据\"><a href=\"#6-赋值被监视数据\" class=\"headerlink\" title=\"6. 赋值被监视数据\"></a>6. 赋值被监视数据</h2><blockquote>\n<p>Duplicate Observed Data</p>\n</blockquote>\n<p>一些领域数据置身于 GUI 控件中，而领域函数需要访问这些数据。</p>\n<p>将该数据赋值到一个领域对象中，建立一个 Oberver 模式，用于同步领域对象和 GUI 对象内的重复数据。</p>\n<p><div align=\"center\"> <img src=\"../pics//e024bd7e-fb4e-4239-9451-9a6227f50b00.jpg\" width=\"\"> </div><br></p>\n<h2 id=\"7-将单向关联改为双向关联\"><a href=\"#7-将单向关联改为双向关联\" class=\"headerlink\" title=\"7. 将单向关联改为双向关联\"></a>7. 将单向关联改为双向关联</h2><blockquote>\n<p>Change Unidirectional Association to Bidirectional</p>\n</blockquote>\n<p>当两个类都需要对方的特性时，可以使用双向关联。</p>\n<p>有两个类，分别为订单 Order 和客户 Customer，Order 引用了 Customer，Customer 也需要引用 Order 来查看其所有订单详情。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Customer customer;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCustomer</span><span class=\"params\">(Customer customer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.customer != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.customer.removeOrder(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customer = customer;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.customer.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Curstomer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;Order&gt; orders = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeOrder</span><span class=\"params\">(Order order)</span> </span>&#123;</span><br><span class=\"line\">        orders.remove(order);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addOrder</span><span class=\"params\">(Order order)</span> </span>&#123;</span><br><span class=\"line\">        orders.add(order);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意到，这里让 Curstomer 类来控制关联关系。有以下原则来决定哪个类来控制关联关系：如果某个对象是组成另一个对象的部件，那么由后者负责控制关联关系；如果是一对多关系，则由单一引用那一方来控制关联关系。</p>\n<h2 id=\"8-将双向关联改为单向关联\"><a href=\"#8-将双向关联改为单向关联\" class=\"headerlink\" title=\"8. 将双向关联改为单向关联\"></a>8. 将双向关联改为单向关联</h2><blockquote>\n<p>Change Bidirectional Association to Unidirectional</p>\n</blockquote>\n<p>和 Change Unidirectional Association to Bidirectiona 为反操作。</p>\n<p>双向关联维护成本高，并且也不易于理解。大量的双向连接很容易造成“僵尸对象”：某个对象本身已经死亡了，却保留在系统中，因为它的引用还没有全部完全清除。</p>\n<h2 id=\"9-以字面常量取代魔法数\"><a href=\"#9-以字面常量取代魔法数\" class=\"headerlink\" title=\"9. 以字面常量取代魔法数\"></a>9. 以字面常量取代魔法数</h2><blockquote>\n<p>Replace Magic Number with Symbolic Constant</p>\n</blockquote>\n<p>创建一个常量，根据其意义为它命名，并将字面常量换为这个常量。</p>\n<h2 id=\"10-封装字段\"><a href=\"#10-封装字段\" class=\"headerlink\" title=\"10. 封装字段\"></a>10. 封装字段</h2><blockquote>\n<p>Encapsulate Field</p>\n</blockquote>\n<p>public 字段应当改为 private，并提供相应的访问函数。</p>\n<h2 id=\"11-封装集合\"><a href=\"#11-封装集合\" class=\"headerlink\" title=\"11. 封装集合\"></a>11. 封装集合</h2><blockquote>\n<p>Encapsulate Collection</p>\n</blockquote>\n<p>函数返回集合的一个只读副本，并在这个类中提供添加/移除集合元素的函数。如果函数返回集合自身，会让用户得以修改集合内容而集合拥有者却一无所知。</p>\n<h2 id=\"12-以数据类取代记录\"><a href=\"#12-以数据类取代记录\" class=\"headerlink\" title=\"12. 以数据类取代记录\"></a>12. 以数据类取代记录</h2><blockquote>\n<p>Replace Record with Data Class</p>\n</blockquote>\n<h2 id=\"13-以类取代类型码\"><a href=\"#13-以类取代类型码\" class=\"headerlink\" title=\"13. 以类取代类型码\"></a>13. 以类取代类型码</h2><blockquote>\n<p>Replace Type Code with Class</p>\n</blockquote>\n<p>类中有一个数值类型码，但它并不影响类的行为，就用一个新类替换该数值类型码。如果类型码出现在 switch 语句中，需要使用 Replace Conditional with Polymorphism 去掉 switch，首先必须运用 Replace Type Code with Subcalss 或 Replace Type Code with State/Strategy 去掉类型码。</p>\n<p><div align=\"center\"> <img src=\"../pics//27c2e0b3-8f95-453d-bedc-6398a8566ce9.jpg\" width=\"500\"> </div><br></p>\n<h2 id=\"14-以子类取代类型码\"><a href=\"#14-以子类取代类型码\" class=\"headerlink\" title=\"14. 以子类取代类型码\"></a>14. 以子类取代类型码</h2><blockquote>\n<p>Replace Type Code with Subcalsses</p>\n</blockquote>\n<p>有一个不可变的类型码，它会影响类的行为，以子类取代这个类型码。</p>\n<p><div align=\"center\"> <img src=\"../pics//c41d3977-e0e7-4ee4-93e1-d84f1ae3e20e.jpg\" width=\"500\"> </div><br></p>\n<h2 id=\"15-以-State-Strategy-取代类型码\"><a href=\"#15-以-State-Strategy-取代类型码\" class=\"headerlink\" title=\"15. 以 State/Strategy 取代类型码\"></a>15. 以 State/Strategy 取代类型码</h2><blockquote>\n<p>Replace Type Code with State/Strategy</p>\n</blockquote>\n<p>有一个可变的类型码，它会影响类的行为，以状态对象取代类型码。</p>\n<p>和 Replace Type Code with Subcalsses 的区别是 Replace Type Code with State/Strategy 的类型码是动态可变的，前者通过继承的方式来实现，后者通过组合的方式来实现。因为类型码可变，如果通过继承的方式，一旦一个对象的类型码改变，那么就要改变用新的对象来取代旧对象，而客户端难以改变新的对象。但是通过组合的方式，改变引用的状态类是很容易的。</p>\n<p><div align=\"center\"> <img src=\"../pics//81fd1d6f-a3b2-4160-9a0a-1f7cb50ba440.jpg\" width=\"800\"> </div><br></p>\n<h2 id=\"16-以字段取代子类\"><a href=\"#16-以字段取代子类\" class=\"headerlink\" title=\"16. 以字段取代子类\"></a>16. 以字段取代子类</h2><blockquote>\n<p>Replace Subclass with Fields</p>\n</blockquote>\n<p>各个子类的唯一差别只在“返回常量数据”的函数上。</p>\n<p><div align=\"center\"> <img src=\"../pics//f2e0cee9-ecdc-4a96-853f-d9f6a1ad6ad1.jpg\" width=\"600\"> </div><br></p>\n<h1 id=\"八、简化条件表达式\"><a href=\"#八、简化条件表达式\" class=\"headerlink\" title=\"八、简化条件表达式\"></a>八、简化条件表达式</h1><h2 id=\"1-分解条件表达式\"><a href=\"#1-分解条件表达式\" class=\"headerlink\" title=\"1. 分解条件表达式\"></a>1. 分解条件表达式</h2><blockquote>\n<p>Decompose Conditional</p>\n</blockquote>\n<p>对于一个复杂的条件语句，可以从 if、then、else 三个段落中分别提炼出独立函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (data.befor(SUMMER_START) || data.after(SUMMER_END))</span><br><span class=\"line\">    charge = quantity * winterRate + winterServiceCharge;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    charge = quantity * summerRate;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (notSummer(date))</span><br><span class=\"line\">    charge = winterCharge(quantity);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    charge = summerCharge(quantity);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-合并条件表达式\"><a href=\"#2-合并条件表达式\" class=\"headerlink\" title=\"2. 合并条件表达式\"></a>2. 合并条件表达式</h2><blockquote>\n<p>Consolidate Conditional Expression</p>\n</blockquote>\n<p>有一系列条件测试，都得到相同结果。</p>\n<p>将这些测试合并为一个条件表达式，并将这个条件表达式提炼成为一个独立函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">disabilityAmount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (seniority &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (monthsDisabled &gt; <span class=\"number\">12</span> ) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isPartTime) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">disabilityAmount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNotEligibleForDisability()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-合并重复的条件片段\"><a href=\"#3-合并重复的条件片段\" class=\"headerlink\" title=\"3. 合并重复的条件片段\"></a>3. 合并重复的条件片段</h2><blockquote>\n<p>Consolidate Duplicate Conditional Fragments</p>\n</blockquote>\n<p>在条件表达式的每个分支上有着相同的一段代码。</p>\n<p>将这段重复代码搬移到条件表达式之外。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isSpecialDeal()) &#123;</span><br><span class=\"line\">    total = price * <span class=\"number\">0.95</span>;</span><br><span class=\"line\">    send();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    total = price * <span class=\"number\">0.98</span>;</span><br><span class=\"line\">    send();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isSpecialDeal()) &#123;</span><br><span class=\"line\">    total = price * <span class=\"number\">0.95</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    total = price * <span class=\"number\">0.98</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">send();</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-移除控制标记\"><a href=\"#4-移除控制标记\" class=\"headerlink\" title=\"4. 移除控制标记\"></a>4. 移除控制标记</h2><blockquote>\n<p>Remove Control Flag</p>\n</blockquote>\n<p>在一系列布尔表达式中，某个变量带有“控制标记”的作用。</p>\n<p>用 break 语句或 return 语句来取代控制标记。</p>\n<h2 id=\"5-以卫语句取代嵌套条件表达式\"><a href=\"#5-以卫语句取代嵌套条件表达式\" class=\"headerlink\" title=\"5. 以卫语句取代嵌套条件表达式\"></a>5. 以卫语句取代嵌套条件表达式</h2><blockquote>\n<p>Replace Nested Conditional with Guard Clauses</p>\n</blockquote>\n<p>如果某个条件极其罕见，就应该单独检查该条件，并在该条件为真时立刻从函数中返回，这样的单独检查常常被称为“卫语句”（guard clauses）。</p>\n<p>条件表达式通常有两种表现形式。第一种形式是：所有分支都属于正常行为。第二种形式则是：条件表达式提供的答案中只有一种是正常行为，其他都是不常见的情况，可以使用卫语句表现所有特殊情况。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPayAmount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDead) result = deadAmount();</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSeparated) result = separatedAmount();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isRetired) result = retiredAmount();</span><br><span class=\"line\">            <span class=\"keyword\">else</span> result = normalPayAmount();</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPayAmount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDead) <span class=\"keyword\">return</span> deadAmount();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isSeparated) <span class=\"keyword\">return</span> separatedAmount();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRetired) <span class=\"keyword\">return</span> retiredAmount();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> normalPayAmount();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-以多态取代条件表达式\"><a href=\"#6-以多态取代条件表达式\" class=\"headerlink\" title=\"6. 以多态取代条件表达式\"></a>6. 以多态取代条件表达式</h2><blockquote>\n<p>Replace Conditional with Polymorphism</p>\n</blockquote>\n<p>将这个条件表达式的每个分支放进一个子类内的覆写函数中，然后将原始函数声明为抽象函数。需要先使用 Replace Type Code with Subclass 或 Replace Type Code with State/Strategy 来建立继承结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getSpeed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> EUROPEAN:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getBaseSpeed();</span><br><span class=\"line\">        <span class=\"keyword\">case</span> AFRICAN:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getBaseSpeed()- getLoadFactor()* numberOfCoconuts;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> NORWEGIAN_BLUE:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> isNailed ? <span class=\"number\">0</span> : getBaseSpeed(voltage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Should be unreachable\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><div align=\"center\"> <img src=\"../pics//1c8432c8-2552-457f-b117-1da36c697221.jpg\" width=\"500\"> </div><br></p>\n<h2 id=\"7-引入-Null-对象\"><a href=\"#7-引入-Null-对象\" class=\"headerlink\" title=\"7. 引入 Null 对象\"></a>7. 引入 Null 对象</h2><blockquote>\n<p>Introduce Null Object</p>\n</blockquote>\n<p>将 null 值替换为 null 对象。这样做的好处在于，不需要询问对象是否为空，直接调用就行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (customer == <span class=\"keyword\">null</span>) plan = BillingPlan.basic();</span><br><span class=\"line\"><span class=\"keyword\">else</span> plan = customer.getPlan();</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-引入断言\"><a href=\"#8-引入断言\" class=\"headerlink\" title=\"8. 引入断言\"></a>8. 引入断言</h2><blockquote>\n<p>Introduce Assertion</p>\n</blockquote>\n<p>以断言明确表现某种假设。断言只能用于开发过程中，产品代码中不会有断言。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getExpenseLimit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// should have either expense limit or a primary project</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (expenseLimit != NULL_EXPENSE) ? expenseLimit :  primaryProject.getMemberExpenseLimit();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getExpenseLimit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Assert.isTrue (expenseLimit != NULL_EXPENSE || primaryProject != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (expenseLimit != NULL_EXPENSE) ? expenseLimit :  primaryProject.getMemberExpenseLimit();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"九、简化函数调用\"><a href=\"#九、简化函数调用\" class=\"headerlink\" title=\"九、简化函数调用\"></a>九、简化函数调用</h1><h2 id=\"1-函数改名\"><a href=\"#1-函数改名\" class=\"headerlink\" title=\"1. 函数改名\"></a>1. 函数改名</h2><blockquote>\n<p>Rename Method</p>\n</blockquote>\n<p>使函数名能解释函数的用途。</p>\n<h2 id=\"2-添加参数\"><a href=\"#2-添加参数\" class=\"headerlink\" title=\"2. 添加参数\"></a>2. 添加参数</h2><blockquote>\n<p>Add Parameter</p>\n</blockquote>\n<p>使函数不需要通过调用获得某个信息。</p>\n<h2 id=\"3-移除参数\"><a href=\"#3-移除参数\" class=\"headerlink\" title=\"3. 移除参数\"></a>3. 移除参数</h2><blockquote>\n<p>Remove Parameter</p>\n</blockquote>\n<p>与 Add Parameter 相反，改用调用的方式来获得某个信息。</p>\n<h2 id=\"4-将查询函数和修改函数分离\"><a href=\"#4-将查询函数和修改函数分离\" class=\"headerlink\" title=\"4. 将查询函数和修改函数分离\"></a>4. 将查询函数和修改函数分离</h2><blockquote>\n<p>Separate Query from Modifier</p>\n</blockquote>\n<p>某个函数即返回对象状态值，又修改对象状态。</p>\n<p>应当建立两个不同的函数，其中一个负责查询，另一个负责修改。任何有返回值的函数，都不应该有看得到的副作用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getTotalOutstandingAndSetReadyForSummaries();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getTotalOutstanding();</span><br><span class=\"line\">setReadyForSummaries();</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-令函数携带参数\"><a href=\"#5-令函数携带参数\" class=\"headerlink\" title=\"5. 令函数携带参数\"></a>5. 令函数携带参数</h2><blockquote>\n<p>Parameterize Method</p>\n</blockquote>\n<p>若干函数做了类似的工作，但在函数本体中却包含了不同的值。</p>\n<p>建立单一函数，以参数表达那些不同的值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fivePercentRaise();</span><br><span class=\"line\">tenPercentRaise();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raise(percentage);</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-以明确函数取代参数\"><a href=\"#6-以明确函数取代参数\" class=\"headerlink\" title=\"6. 以明确函数取代参数\"></a>6. 以明确函数取代参数</h2><blockquote>\n<p>Replace Parameter with Explicit Methods</p>\n</blockquote>\n<p>有一个函数，完全取决于参数值而采取不同行为。</p>\n<p>针对该参数的每一个可能值，建立一个独立函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">\"height\"</span>))&#123;</span><br><span class=\"line\">        height = value;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">\"width\"</span>))&#123;</span><br><span class=\"line\">        width = value;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Assert.shouldNeverReachHere();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHeight</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span></span>&#123;</span><br><span class=\"line\">    height = arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setWidth</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span></span>&#123;</span><br><span class=\"line\">    width = arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-保持对象完整\"><a href=\"#7-保持对象完整\" class=\"headerlink\" title=\"7. 保持对象完整\"></a>7. 保持对象完整</h2><blockquote>\n<p>Preserve Whole Object</p>\n</blockquote>\n<p>从某个对象中取出若干值，将它们作为某一次函数调用时的参数。</p>\n<p>改为传递整个对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> low = daysTempRange().getLow();</span><br><span class=\"line\"><span class=\"keyword\">int</span> high = daysTempRange().getHigh();</span><br><span class=\"line\">withinPlan = plan.withinRange(low, high);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">withinPlan = plan.withinRange(daysTempRange());</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-以函数取代参数\"><a href=\"#8-以函数取代参数\" class=\"headerlink\" title=\"8. 以函数取代参数\"></a>8. 以函数取代参数</h2><blockquote>\n<p>Replace Parameter with Methods</p>\n</blockquote>\n<p>对象调用某个函数，并将所得结果作为参数，传递给另一个函数。而接受该参数的函数本身也能够调用前一个函数。</p>\n<p>让参数接收者去除该项参数，而是直接调用前一个函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> basePrice = _quantity * _itemPrice;</span><br><span class=\"line\">discountLevel = getDiscountLevel();</span><br><span class=\"line\"><span class=\"keyword\">double</span> finalPrice = discountedPrice (basePrice, discountLevel);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> basePrice = _quantity * _itemPrice;</span><br><span class=\"line\"><span class=\"keyword\">double</span> finalPrice = discountedPrice (basePrice);</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-引入参数对象\"><a href=\"#9-引入参数对象\" class=\"headerlink\" title=\"9. 引入参数对象\"></a>9. 引入参数对象</h2><blockquote>\n<p>Introduce Parameter Object</p>\n</blockquote>\n<p>某些参数总是很自然地同时出现，这些参数就是 Data Clumps。</p>\n<p>以一个对象取代这些参数。</p>\n<p><div align=\"center\"> <img src=\"../pics//08738dd0-ae8e-404a-ba78-a6b1b7d225b3.jpg\" width=\"600\"> </div><br></p>\n<h2 id=\"10-移除设值函数\"><a href=\"#10-移除设值函数\" class=\"headerlink\" title=\"10. 移除设值函数\"></a>10. 移除设值函数</h2><blockquote>\n<p>Remove Setting Method</p>\n</blockquote>\n<p>类中的某个字段应该在对象创建时被设值，然后就不再改变。</p>\n<p>去掉该字段的所有设值函数，并将该字段设为 final。</p>\n<h2 id=\"11-隐藏函数\"><a href=\"#11-隐藏函数\" class=\"headerlink\" title=\"11. 隐藏函数\"></a>11. 隐藏函数</h2><blockquote>\n<p>Hide Method</p>\n</blockquote>\n<p>有一个函数，从来没有被其他任何类用到。</p>\n<p>将这个函数修改为 private。</p>\n<h2 id=\"12-以工厂函数取代构造函数\"><a href=\"#12-以工厂函数取代构造函数\" class=\"headerlink\" title=\"12. 以工厂函数取代构造函数\"></a>12. 以工厂函数取代构造函数</h2><blockquote>\n<p>Replace Constructor with Factory Method</p>\n</blockquote>\n<p>希望在创建对象时不仅仅是做简单的建构动作。</p>\n<p>将构造函数替换为工厂函数。</p>\n<h2 id=\"13-封装向下转型\"><a href=\"#13-封装向下转型\" class=\"headerlink\" title=\"13. 封装向下转型\"></a>13. 封装向下转型</h2><blockquote>\n<p>Encapsulate Downcast</p>\n</blockquote>\n<p>某个函数返回的对象，需要由函数调用者执行向下转型（downcast）。</p>\n<p>将向下转型动作移到函数中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Object <span class=\"title\">lastReading</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> readings.lastElement();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Reading <span class=\"title\">lastReading</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (Reading)readings.lastElement();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-以异常取代错误码\"><a href=\"#14-以异常取代错误码\" class=\"headerlink\" title=\"14. 以异常取代错误码\"></a>14. 以异常取代错误码</h2><blockquote>\n<p>Replace Error Code with Exception</p>\n</blockquote>\n<p>某个函数返回一个特定的代码，用以表示某种错误情况。</p>\n<p>改用异常，异常将普通程序和错误处理分开，使代码更容易理解。</p>\n<h2 id=\"15-以测试取代异常\"><a href=\"#15-以测试取代异常\" class=\"headerlink\" title=\"15. 以测试取代异常\"></a>15. 以测试取代异常</h2><blockquote>\n<p>Replace Exception with Test</p>\n</blockquote>\n<p>面对一个调用者可以预先检查的条件，你抛出了一个异常。</p>\n<p>修改调用者，使它在调用函数之前先做检查。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getValueForPeriod</span><span class=\"params\">(<span class=\"keyword\">int</span> periodNumber)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> values[periodNumber];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getValueForPeriod</span><span class=\"params\">(<span class=\"keyword\">int</span> periodNumber)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (periodNumber &gt;= values.length) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> values[periodNumber];</span><br></pre></td></tr></table></figure>\n<h1 id=\"十、处理概括关系\"><a href=\"#十、处理概括关系\" class=\"headerlink\" title=\"十、处理概括关系\"></a>十、处理概括关系</h1><h2 id=\"1-字段上移\"><a href=\"#1-字段上移\" class=\"headerlink\" title=\"1. 字段上移\"></a>1. 字段上移</h2><blockquote>\n<p>Pull Up Field</p>\n</blockquote>\n<p>两个子类拥有相同的字段。</p>\n<p>将该字段移至超类。</p>\n<h2 id=\"2-函数上移\"><a href=\"#2-函数上移\" class=\"headerlink\" title=\"2. 函数上移\"></a>2. 函数上移</h2><blockquote>\n<p>Pull Up Method</p>\n</blockquote>\n<p>有些函数，在各个子类中产生完全相同的结果。</p>\n<p>将该函数移至超类。</p>\n<h2 id=\"3-构造函数本体上移\"><a href=\"#3-构造函数本体上移\" class=\"headerlink\" title=\"3. 构造函数本体上移\"></a>3. 构造函数本体上移</h2><blockquote>\n<p>Pull Up Constructor Body</p>\n</blockquote>\n<p>你在各个子类中拥有一些构造函数，它们的本体几乎完全一致。</p>\n<p>在超类中新建一个构造函数，并在子类构造函数中调用它。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title\">Employee</span>...</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">Manager</span>(<span class=\"title\">String</span> <span class=\"title\">name</span>, <span class=\"title\">String</span> <span class=\"title\">id</span>, <span class=\"title\">int</span> <span class=\"title\">grade</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.grade = grade;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Manager</span><span class=\"params\">(String name, String id, <span class=\"keyword\">int</span> grade)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name, id);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.grade = grade;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-函数下移\"><a href=\"#4-函数下移\" class=\"headerlink\" title=\"4. 函数下移\"></a>4. 函数下移</h2><blockquote>\n<p>Push Down Method</p>\n</blockquote>\n<p>超类中的某个函数只与部分子类有关。</p>\n<p>将这个函数移到相关的那些子类去。</p>\n<h2 id=\"5-字段下移\"><a href=\"#5-字段下移\" class=\"headerlink\" title=\"5. 字段下移\"></a>5. 字段下移</h2><blockquote>\n<p>Push Down Field</p>\n</blockquote>\n<p>超类中的某个字段只被部分子类用到。</p>\n<p>将这个字段移到需要它的那些子类去。</p>\n<h2 id=\"6-提炼子类\"><a href=\"#6-提炼子类\" class=\"headerlink\" title=\"6. 提炼子类\"></a>6. 提炼子类</h2><blockquote>\n<p>Extract Subclass</p>\n</blockquote>\n<p>类中的某些特性只被某些实例用到。</p>\n<p>新建一个子类，将上面所说的那一部分特性移到子类中。</p>\n<h2 id=\"7-提炼超类\"><a href=\"#7-提炼超类\" class=\"headerlink\" title=\"7. 提炼超类\"></a>7. 提炼超类</h2><blockquote>\n<p>Extract Superclass</p>\n</blockquote>\n<p>两个类有相似特性。</p>\n<p>为这两个类建立一个超类，将相同特性移至超类。</p>\n<h2 id=\"8-提炼接口\"><a href=\"#8-提炼接口\" class=\"headerlink\" title=\"8. 提炼接口\"></a>8. 提炼接口</h2><blockquote>\n<p>Extract Interface</p>\n</blockquote>\n<p>若干客户使用类接口中的同一子集，或者两个类的接口有部分相同。</p>\n<p>将相同的子集提炼到一个独立接口中。</p>\n<h2 id=\"9-折叠继承体系\"><a href=\"#9-折叠继承体系\" class=\"headerlink\" title=\"9. 折叠继承体系\"></a>9. 折叠继承体系</h2><blockquote>\n<p>Collapse Hierarchy</p>\n</blockquote>\n<p>超类和子类之间无太大区别。</p>\n<p>将它们合为一体。</p>\n<h2 id=\"10-塑造模板函数\"><a href=\"#10-塑造模板函数\" class=\"headerlink\" title=\"10. 塑造模板函数\"></a>10. 塑造模板函数</h2><blockquote>\n<p>Form Template Method</p>\n</blockquote>\n<p>你有一些子类，其中相应的某些函数以相同顺序执行类似的操作，但各个操作的细节上有所不同。</p>\n<p>将这些操作分别放进独立函数中，并保持它们都有相同的签名，于是原函数也就变得相同了。然后将原函数上移至超类。(模板方法模式)</p>\n<h2 id=\"11-以委托取代继承\"><a href=\"#11-以委托取代继承\" class=\"headerlink\" title=\"11. 以委托取代继承\"></a>11. 以委托取代继承</h2><blockquote>\n<p>Replace Inheritance with Delegation</p>\n</blockquote>\n<p>某个子类只使用超类接口中的一部分，或是根本不需要继承而来的数据。</p>\n<p>在子类中新建一个字段用以保存超类，调整子类函数，令它改而委托超类，然后去掉两者之间的继承关系。</p>\n<h2 id=\"12-以继承取代委托\"><a href=\"#12-以继承取代委托\" class=\"headerlink\" title=\"12. 以继承取代委托\"></a>12. 以继承取代委托</h2><blockquote>\n<p>Replace Delegation with Inheritance</p>\n</blockquote>\n<p>你在两个类之间使用委托关系，并经常为整个接口编写许多极简单的委托函数。</p>\n<p>让委托类继承受托类。</p>\n<h1 id=\"重构练习\"><a href=\"#重构练习\" class=\"headerlink\" title=\"重构练习\"></a>重构练习</h1><ul>\n<li><a href=\"https://github.com/aikin/refactoring-kata\" target=\"_blank\" rel=\"noopener\">Refactoring Kata</a></li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li>MartinFowler, 福勒, 贝克, 等. 重构: 改善既有代码的设计 [M]. 电子工业出版社, 2011.</li>\n</ul>\n","categories":[{"name":"其他","slug":"其他","count":4,"path":"api/categories/其他.json"}],"tags":[{"name":"其他","slug":"其他","count":6,"path":"api/tags/其他.json"}]}