{"title":"面向对象","slug":"面向对象思想","date":"2018-07-20T02:49:41.000Z","updated":"2018-09-26T07:52:49.721Z","comments":true,"path":"api/articles/面向对象思想.json","photos":[],"link":"","excerpt":"一、三大特性封装继承多态二、类图泛化关系 (Generalization)实现关系 (Realization)聚合关系 (Aggregation)组合关系 (Composition)关联关系 (Association)依赖关系 (Dependency)三、设计原则S.O.L.I.D其他常见原则参考资料","covers":["../pics//SoWkIImgAStDuU8goIp9ILLmJyrBBKh.png","../pics//SoWkIImgAStDuU8goIp9ILK8IatCoQn.png","../pics//SoWkIImgAStDuU8goIp9ILLmJ4ylIar.png","../pics//SoWkIImgAStDuU8goIp9ILLmpiyjo2_.png","../pics//SoWkIImgAStDuU8goIp9ILLmB2xEJyv.png","../pics//LOun2W9134NxVugmbJPp15d4LalxC4O.png"],"content":"<!-- GFM-TOC -->\n<ul>\n<li><a href=\"#一三大特性\">一、三大特性</a><ul>\n<li><a href=\"#封装\">封装</a></li>\n<li><a href=\"#继承\">继承</a></li>\n<li><a href=\"#多态\">多态</a></li>\n</ul>\n</li>\n<li><a href=\"#二类图\">二、类图</a><ul>\n<li><a href=\"#泛化关系-generalization\">泛化关系 (Generalization)</a></li>\n<li><a href=\"#实现关系-realization\">实现关系 (Realization)</a></li>\n<li><a href=\"#聚合关系-aggregation\">聚合关系 (Aggregation)</a></li>\n<li><a href=\"#组合关系-composition\">组合关系 (Composition)</a></li>\n<li><a href=\"#关联关系-association\">关联关系 (Association)</a></li>\n<li><a href=\"#依赖关系-dependency\">依赖关系 (Dependency)</a></li>\n</ul>\n</li>\n<li><a href=\"#三设计原则\">三、设计原则</a><ul>\n<li><a href=\"#solid\">S.O.L.I.D</a></li>\n<li><a href=\"#其他常见原则\">其他常见原则</a></li>\n</ul>\n</li>\n<li><a href=\"#参考资料\">参考资料</a><!-- GFM-TOC -->\n</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"一、三大特性\"><a href=\"#一、三大特性\" class=\"headerlink\" title=\"一、三大特性\"></a>一、三大特性</h1><h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><p>利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。</p>\n<p>优点：</p>\n<ul>\n<li>减少耦合：可以独立地开发、测试、优化、使用、理解和修改</li>\n<li>减轻维护的负担：可以更容易被程序员理解，并且在调试的时候可以不影响其他模块</li>\n<li>有效地调节性能：可以通过剖析确定哪些模块影响了系统的性能</li>\n<li>提高软件的可重用性</li>\n<li>降低了构建大型系统的风险：即使整个系统不可用，但是这些独立的模块却有可能是可用的</li>\n</ul>\n<p>以下 Person 类封装 name、gender、age 等属性，外界只能通过 get() 方法获取一个 Person 对象的 name 属性和 gender 属性，而无法获取 age 属性，但是 age 属性可以供 work() 方法使用。</p>\n<p>注意到 gender 属性使用 int 数据类型进行存储，封装使得用户注意不到这种实现细节。并且在需要修改 gender 属性使用的数据类型时，也可以在不影响客户端代码的情况下进行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> gender;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getGender</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gender == <span class=\"number\">0</span> ? <span class=\"string\">\"man\"</span> : <span class=\"string\">\"woman\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">18</span> &lt;= age &amp;&amp; age &lt;= <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">            System.out.println(name + <span class=\"string\">\" is working very hard!\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(name + <span class=\"string\">\" can't work any more!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>继承实现了  <strong>IS-A</strong>  关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。</p>\n<p>继承应该遵循里氏替换原则，子类对象必须能够替换掉所有父类对象。</p>\n<p>Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为  <strong>向上转型</strong> 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Animal animal = <span class=\"keyword\">new</span> Cat();</span><br></pre></td></tr></table></figure>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><p>多态分为编译时多态和运行时多态：</p>\n<ul>\n<li>编译时多态主要指方法的重载</li>\n<li>运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定</li>\n</ul>\n<p>运行时多态有三个条件：</p>\n<ul>\n<li>继承</li>\n<li>覆盖（重写）</li>\n<li>向上转型</li>\n</ul>\n<p>下面的代码中，乐器类（Instrument）有两个子类：Wind 和 Percussion，它们都覆盖了父类的 play() 方法，并且在 main() 方法中使用父类 Instrument 来引用 Wind 和 Percussion 对象。在 Instrument 引用调用 play() 方法时，会执行实际引用对象所在类的 play() 方法，而不是 Instrument 类的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Instrument</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Instument is playing...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wind</span> <span class=\"keyword\">extends</span> <span class=\"title\">Instrument</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Wind is playing...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Percussion</span> <span class=\"keyword\">extends</span> <span class=\"title\">Instrument</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Percussion is playing...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Music</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Instrument&gt; instruments = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        instruments.add(<span class=\"keyword\">new</span> Wind());</span><br><span class=\"line\">        instruments.add(<span class=\"keyword\">new</span> Percussion());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Instrument instrument : instruments) &#123;</span><br><span class=\"line\">            instrument.play();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、类图\"><a href=\"#二、类图\" class=\"headerlink\" title=\"二、类图\"></a>二、类图</h1><p>以下类图使用 <a href=\"https://www.planttext.com/\" target=\"_blank\" rel=\"noopener\">PlantUML</a> 绘制，更多语法及使用请参考：<a href=\"http://plantuml.com/\" target=\"_blank\" rel=\"noopener\">http://plantuml.com/</a> 。</p>\n<h2 id=\"泛化关系-Generalization\"><a href=\"#泛化关系-Generalization\" class=\"headerlink\" title=\"泛化关系 (Generalization)\"></a>泛化关系 (Generalization)</h2><p>用来描述继承关系，在 Java 中使用 extends 关键字。</p>\n<p><div align=\"center\"> <img src=\"../pics//SoWkIImgAStDuU8goIp9ILLmJyrBBKh.png\"> </div><br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\"></span><br><span class=\"line\">title Generalization</span><br><span class=\"line\"></span><br><span class=\"line\">class Vihical</span><br><span class=\"line\">class Car</span><br><span class=\"line\">class Trunck</span><br><span class=\"line\"></span><br><span class=\"line\">Vihical &lt;|-- Car</span><br><span class=\"line\">Vihical &lt;|-- Trunck</span><br><span class=\"line\"></span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现关系-Realization\"><a href=\"#实现关系-Realization\" class=\"headerlink\" title=\"实现关系 (Realization)\"></a>实现关系 (Realization)</h2><p>用来实现一个接口，在 Java 中使用 implement 关键字。</p>\n<p><div align=\"center\"> <img src=\"../pics//SoWkIImgAStDuU8goIp9ILK8IatCoQn.png\"> </div><br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\"></span><br><span class=\"line\">title Realization</span><br><span class=\"line\"></span><br><span class=\"line\">interface MoveBehavior</span><br><span class=\"line\">class Fly</span><br><span class=\"line\">class Run</span><br><span class=\"line\"></span><br><span class=\"line\">MoveBehavior &lt;|.. Fly</span><br><span class=\"line\">MoveBehavior &lt;|.. Run</span><br><span class=\"line\"></span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<h2 id=\"聚合关系-Aggregation\"><a href=\"#聚合关系-Aggregation\" class=\"headerlink\" title=\"聚合关系 (Aggregation)\"></a>聚合关系 (Aggregation)</h2><p>表示整体由部分组成，但是整体和部分不是强依赖的，整体不存在了部分还是会存在。</p>\n<p><div align=\"center\"> <img src=\"../pics//SoWkIImgAStDuU8goIp9ILLmJ4ylIar.png\"> </div><br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\"></span><br><span class=\"line\">title Aggregation</span><br><span class=\"line\"></span><br><span class=\"line\">class Computer</span><br><span class=\"line\">class Keyboard</span><br><span class=\"line\">class Mouse</span><br><span class=\"line\">class Screen</span><br><span class=\"line\"></span><br><span class=\"line\">Computer o-- Keyboard</span><br><span class=\"line\">Computer o-- Mouse</span><br><span class=\"line\">Computer o-- Screen</span><br><span class=\"line\"></span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<h2 id=\"组合关系-Composition\"><a href=\"#组合关系-Composition\" class=\"headerlink\" title=\"组合关系 (Composition)\"></a>组合关系 (Composition)</h2><p>和聚合不同，组合中整体和部分是强依赖的，整体不存在了部分也不存在了。比如公司和部门，公司没了部门就不存在了。但是公司和员工就属于聚合关系了，因为公司没了员工还在。</p>\n<p><div align=\"center\"> <img src=\"../pics//SoWkIImgAStDuU8goIp9ILLmpiyjo2_.png\"> </div><br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\"></span><br><span class=\"line\">title Composition</span><br><span class=\"line\"></span><br><span class=\"line\">class Company</span><br><span class=\"line\">class DepartmentA</span><br><span class=\"line\">class DepartmentB</span><br><span class=\"line\"></span><br><span class=\"line\">Company *-- DepartmentA</span><br><span class=\"line\">Company *-- DepartmentB</span><br><span class=\"line\"></span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<h2 id=\"关联关系-Association\"><a href=\"#关联关系-Association\" class=\"headerlink\" title=\"关联关系 (Association)\"></a>关联关系 (Association)</h2><p>表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。</p>\n<p><div align=\"center\"> <img src=\"../pics//SoWkIImgAStDuU8goIp9ILLmB2xEJyv.png\"> </div><br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\"></span><br><span class=\"line\">title Association</span><br><span class=\"line\"></span><br><span class=\"line\">class School</span><br><span class=\"line\">class Student</span><br><span class=\"line\"></span><br><span class=\"line\">School &quot;1&quot; - &quot;n&quot; Student</span><br><span class=\"line\"></span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<h2 id=\"依赖关系-Dependency\"><a href=\"#依赖关系-Dependency\" class=\"headerlink\" title=\"依赖关系 (Dependency)\"></a>依赖关系 (Dependency)</h2><p>和关联关系不同的是，依赖关系是在运行过程中起作用的。A 类和 B 类是依赖关系主要有三种形式：</p>\n<ul>\n<li>A 类是 B 类方法的局部变量；</li>\n<li>A 类是 B 类方法当中的一个参数；</li>\n<li>A 类向 B 类发送消息，从而影响 B 类发生变化。</li>\n</ul>\n<p><div align=\"center\"> <img src=\"../pics//LOun2W9134NxVugmbJPp15d4LalxC4O.png\"> </div><br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\"></span><br><span class=\"line\">title Dependency</span><br><span class=\"line\"></span><br><span class=\"line\">class Vihicle &#123;</span><br><span class=\"line\">    move(MoveBehavior)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface MoveBehavior &#123;</span><br><span class=\"line\">    move()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">note &quot;MoveBehavior.move()&quot; as N</span><br><span class=\"line\"></span><br><span class=\"line\">Vihicle ..&gt; MoveBehavior</span><br><span class=\"line\"></span><br><span class=\"line\">Vihicle .. N</span><br><span class=\"line\"></span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、设计原则\"><a href=\"#三、设计原则\" class=\"headerlink\" title=\"三、设计原则\"></a>三、设计原则</h1><h2 id=\"S-O-L-I-D\"><a href=\"#S-O-L-I-D\" class=\"headerlink\" title=\"S.O.L.I.D\"></a>S.O.L.I.D</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">简写</th>\n<th style=\"text-align:center\">全拼</th>\n<th style=\"text-align:center\">中文翻译</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">SRP</td>\n<td style=\"text-align:center\">The Single Responsibility Principle</td>\n<td style=\"text-align:center\">单一责任原则</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">OCP</td>\n<td style=\"text-align:center\">The Open Closed Principle</td>\n<td style=\"text-align:center\">开放封闭原则</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LSP</td>\n<td style=\"text-align:center\">The Liskov Substitution Principle</td>\n<td style=\"text-align:center\">里氏替换原则</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ISP</td>\n<td style=\"text-align:center\">The Interface Segregation Principle</td>\n<td style=\"text-align:center\">接口分离原则</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DIP</td>\n<td style=\"text-align:center\">The Dependency Inversion Principle</td>\n<td style=\"text-align:center\">依赖倒置原则</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1-单一责任原则\"><a href=\"#1-单一责任原则\" class=\"headerlink\" title=\"1. 单一责任原则\"></a>1. 单一责任原则</h3><blockquote>\n<p>修改一个类的原因应该只有一个。</p>\n</blockquote>\n<p>换句话说就是让一个类只负责一件事，当这个类需要做过多事情的时候，就需要分解这个类。</p>\n<p>如果一个类承担的职责过多，就等于把这些职责耦合在了一起，一个职责的变化可能会削弱这个类完成其它职责的能力。</p>\n<h3 id=\"2-开放封闭原则\"><a href=\"#2-开放封闭原则\" class=\"headerlink\" title=\"2. 开放封闭原则\"></a>2. 开放封闭原则</h3><blockquote>\n<p>类应该对扩展开放，对修改关闭。</p>\n</blockquote>\n<p>扩展就是添加新功能的意思，因此该原则要求在添加新功能时不需要修改代码。</p>\n<p>符合开闭原则最典型的设计模式是装饰者模式，它可以动态地将责任附加到对象上，而不用去修改类的代码。</p>\n<h3 id=\"3-里氏替换原则\"><a href=\"#3-里氏替换原则\" class=\"headerlink\" title=\"3. 里氏替换原则\"></a>3. 里氏替换原则</h3><blockquote>\n<p>子类对象必须能够替换掉所有父类对象。</p>\n</blockquote>\n<p>继承是一种 IS-A 关系，子类需要能够当成父类来使用，并且需要比父类更特殊。</p>\n<p>如果不满足这个原则，那么各个子类的行为上就会有很大差异，增加继承体系的复杂度。</p>\n<h3 id=\"4-接口分离原则\"><a href=\"#4-接口分离原则\" class=\"headerlink\" title=\"4. 接口分离原则\"></a>4. 接口分离原则</h3><blockquote>\n<p>不应该强迫客户依赖于它们不用的方法。</p>\n</blockquote>\n<p>因此使用多个专门的接口比使用单一的总接口要好。</p>\n<h3 id=\"5-依赖倒置原则\"><a href=\"#5-依赖倒置原则\" class=\"headerlink\" title=\"5. 依赖倒置原则\"></a>5. 依赖倒置原则</h3><blockquote>\n<p>高层模块不应该依赖于低层模块，二者都应该依赖于抽象；<br>抽象不应该依赖于细节，细节应该依赖于抽象。</p>\n</blockquote>\n<p>高层模块包含一个应用程序中重要的策略选择和业务模块，如果高层模块依赖于低层模块，那么低层模块的改动就会直接影响到高层模块，从而迫使高层模块也需要改动。</p>\n<p>依赖于抽象意味着：</p>\n<ul>\n<li>任何变量都不应该持有一个指向具体类的指针或者引用；</li>\n<li>任何类都不应该从具体类派生；</li>\n<li>任何方法都不应该覆写它的任何基类中的已经实现的方法。</li>\n</ul>\n<h2 id=\"其他常见原则\"><a href=\"#其他常见原则\" class=\"headerlink\" title=\"其他常见原则\"></a>其他常见原则</h2><p>除了上述的经典原则，在实际开发中还有下面这些常见的设计原则。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">简写</th>\n<th style=\"text-align:center\">全拼</th>\n<th style=\"text-align:center\">中文翻译</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">LOD</td>\n<td style=\"text-align:center\">The Law of Demeter</td>\n<td style=\"text-align:center\">迪米特法则</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CRP</td>\n<td style=\"text-align:center\">The Composite Reuse Principle</td>\n<td style=\"text-align:center\">合成复用原则</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CCP</td>\n<td style=\"text-align:center\">The Common Closure Principle</td>\n<td style=\"text-align:center\">共同封闭原则</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SAP</td>\n<td style=\"text-align:center\">The Stable Abstractions Principle</td>\n<td style=\"text-align:center\">稳定抽象原则</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SDP</td>\n<td style=\"text-align:center\">The Stable Dependencies Principle</td>\n<td style=\"text-align:center\">稳定依赖原则</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1-迪米特法则\"><a href=\"#1-迪米特法则\" class=\"headerlink\" title=\"1. 迪米特法则\"></a>1. 迪米特法则</h3><p>迪米特法则又叫作最少知识原则（Least Knowledge Principle，简写 LKP），就是说一个对象应当对其他对象有尽可能少的了解，不和陌生人说话。</p>\n<h3 id=\"2-合成复用原则\"><a href=\"#2-合成复用原则\" class=\"headerlink\" title=\"2. 合成复用原则\"></a>2. 合成复用原则</h3><p>尽量使用对象组合，而不是通过继承来达到复用的目的。</p>\n<h3 id=\"3-共同封闭原则\"><a href=\"#3-共同封闭原则\" class=\"headerlink\" title=\"3. 共同封闭原则\"></a>3. 共同封闭原则</h3><p>一起修改的类，应该组合在一起（同一个包里）。如果必须修改应用程序里的代码，我们希望所有的修改都发生在一个包里（修改关闭），而不是遍布在很多包里。</p>\n<h3 id=\"4-稳定抽象原则\"><a href=\"#4-稳定抽象原则\" class=\"headerlink\" title=\"4. 稳定抽象原则\"></a>4. 稳定抽象原则</h3><p>最稳定的包应该是最抽象的包，不稳定的包应该是具体的包，即包的抽象程度跟它的稳定性成正比。</p>\n<h3 id=\"5-稳定依赖原则\"><a href=\"#5-稳定依赖原则\" class=\"headerlink\" title=\"5. 稳定依赖原则\"></a>5. 稳定依赖原则</h3><p>包之间的依赖关系都应该是稳定方向依赖的，包要依赖的包要比自己更具有稳定性。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li>Java 编程思想</li>\n<li>敏捷软件开发：原则、模式与实践</li>\n<li><a href=\"http://www.cnblogs.com/shanyou/archive/2009/09/21/1570716.html\" target=\"_blank\" rel=\"noopener\">面向对象设计的 SOLID 原则</a></li>\n<li><a href=\"http://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html#generalization\" target=\"_blank\" rel=\"noopener\">看懂 UML 类图和时序图</a></li>\n<li><a href=\"http://www.cnblogs.com/wolf-sun/p/UML-Sequence-diagram.html\" target=\"_blank\" rel=\"noopener\">UML 系列——时序图（顺序图）sequence diagram</a></li>\n<li><a href=\"http://blog.csdn.net/jianyuerensheng/article/details/51602015\" target=\"_blank\" rel=\"noopener\">面向对象编程三大特性 —— 封装、继承、多态</a></li>\n</ul>\n","categories":[{"name":"java后端","slug":"java后端","count":10,"path":"api/categories/java后端.json"},{"name":"java基础","slug":"java后端/java基础","count":10,"path":"api/categories/java后端/java基础.json"}],"tags":[{"name":"java","slug":"java","count":11,"path":"api/tags/java.json"}]}