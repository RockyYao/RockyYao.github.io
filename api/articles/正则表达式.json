{"title":"正则表达式","slug":"正则表达式","date":"2018-01-05T10:55:25.000Z","updated":"2018-09-26T07:53:21.940Z","comments":true,"path":"api/articles/正则表达式.json","photos":[],"link":"","excerpt":"一、概述二、匹配单个字符三、匹配一组字符四、使用元字符五、重复匹配六、位置匹配七、使用子表达式八、回溯引用九、前后查找十、嵌入条件参考资料","covers":["../pics//600e9c75-5033-4dad-ae2b-930957db638e.png"],"content":"<!-- GFM-TOC -->\n<ul>\n<li><a href=\"#一概述\">一、概述</a></li>\n<li><a href=\"#二匹配单个字符\">二、匹配单个字符</a></li>\n<li><a href=\"#三匹配一组字符\">三、匹配一组字符</a></li>\n<li><a href=\"#四使用元字符\">四、使用元字符</a></li>\n<li><a href=\"#五重复匹配\">五、重复匹配</a></li>\n<li><a href=\"#六位置匹配\">六、位置匹配</a></li>\n<li><a href=\"#七使用子表达式\">七、使用子表达式</a></li>\n<li><a href=\"#八回溯引用\">八、回溯引用</a></li>\n<li><a href=\"#九前后查找\">九、前后查找</a></li>\n<li><a href=\"#十嵌入条件\">十、嵌入条件</a></li>\n<li><a href=\"#参考资料\">参考资料</a><!-- GFM-TOC -->\n</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h1><p>正则表达式用于文本内容的查找和替换。</p>\n<p>正则表达式内置于其它语言或者软件产品中，它本身不是一种语言或者软件。</p>\n<p><a href=\"https://regexr.com/\" target=\"_blank\" rel=\"noopener\">正则表达式在线工具</a></p>\n<h1 id=\"二、匹配单个字符\"><a href=\"#二、匹配单个字符\" class=\"headerlink\" title=\"二、匹配单个字符\"></a>二、匹配单个字符</h1><p><strong>.</strong>  可以用来匹配任何的单个字符，但是在绝大多数实现里面，不能匹配换行符；</p>\n<p><strong>.</strong>  是元字符，表示它有特殊的含义，而不是字符本身的含义。如果需要匹配 . ，那么要用 \\ 进行转义，即在 . 前面加上 \\ 。</p>\n<p>正则表达式一般是区分大小写的，但是也有些实现是不区分。</p>\n<p><strong>正则表达式</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nam.</span><br></pre></td></tr></table></figure>\n<p><strong>匹配结果</strong> </p>\n<p>My  <strong>name</strong>  is Zheng.</p>\n<h1 id=\"三、匹配一组字符\"><a href=\"#三、匹配一组字符\" class=\"headerlink\" title=\"三、匹配一组字符\"></a>三、匹配一组字符</h1><p><strong>[ ]</strong>  定义一个字符集合；</p>\n<p>0-9、a-z 定义了一个字符区间，区间使用 ASCII 码来确定，字符区间在 [ ] 中使用。</p>\n<p><strong>-</strong>  只有在 [ ] 之间才是元字符，在 [ ] 之外就是一个普通字符；</p>\n<p><strong>^</strong>  在 [ ] 中是取非操作。</p>\n<p><strong>应用</strong> </p>\n<p>匹配以 abc 为开头，并且最后一个字母不为数字的字符串：</p>\n<p><strong>正则表达式</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abc[^0-9]</span><br></pre></td></tr></table></figure>\n<p><strong>匹配结果</strong> </p>\n<ol>\n<li><strong>abcd</strong> </li>\n<li>abc1</li>\n<li>abc2</li>\n</ol>\n<h1 id=\"四、使用元字符\"><a href=\"#四、使用元字符\" class=\"headerlink\" title=\"四、使用元字符\"></a>四、使用元字符</h1><h2 id=\"匹配空白字符\"><a href=\"#匹配空白字符\" class=\"headerlink\" title=\"匹配空白字符\"></a>匹配空白字符</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">元字符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">[\\b]</td>\n<td style=\"text-align:center\">回退（删除）一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\f</td>\n<td style=\"text-align:center\">换页符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\n</td>\n<td style=\"text-align:center\">换行符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\r</td>\n<td style=\"text-align:center\">回车符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\t</td>\n<td style=\"text-align:center\">制表符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\v</td>\n<td style=\"text-align:center\">垂直制表符</td>\n</tr>\n</tbody>\n</table>\n<p>\\r\\n 是 Windows 中的文本行结束标签，在 Unix/Linux 则是 \\n。</p>\n<p>\\r\\n\\r\\n 可以匹配 Windows 下的空白行，因为它将匹配两个连续的行尾标签，而这正是两条记录之间的空白行；</p>\n<h2 id=\"匹配特定的字符类别\"><a href=\"#匹配特定的字符类别\" class=\"headerlink\" title=\"匹配特定的字符类别\"></a>匹配特定的字符类别</h2><h3 id=\"1-数字元字符\"><a href=\"#1-数字元字符\" class=\"headerlink\" title=\"1. 数字元字符\"></a>1. 数字元字符</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">元字符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">\\d</td>\n<td style=\"text-align:center\">数字字符，等价于 [0-9]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\D</td>\n<td style=\"text-align:center\">非数字字符，等价于 [^0-9]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-字母数字元字符\"><a href=\"#2-字母数字元字符\" class=\"headerlink\" title=\"2. 字母数字元字符\"></a>2. 字母数字元字符</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">元字符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">\\w</td>\n<td style=\"text-align:center\">大小写字母，下划线和数字，等价于 [a-zA-Z0-9_]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\W</td>\n<td style=\"text-align:center\">对 \\w 取非</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-空白字符元字符\"><a href=\"#3-空白字符元字符\" class=\"headerlink\" title=\"3. 空白字符元字符\"></a>3. 空白字符元字符</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">元字符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">\\s</td>\n<td style=\"text-align:center\">任何一个空白字符，等价于 [\\f\\n\\r\\t\\v]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\S</td>\n<td style=\"text-align:center\">对 \\s 取非</td>\n</tr>\n</tbody>\n</table>\n<p>\\x 匹配十六进制字符，\\0 匹配八进制，例如 \\x0A 对应 ASCII 字符 10，等价于 \\n。</p>\n<h1 id=\"五、重复匹配\"><a href=\"#五、重复匹配\" class=\"headerlink\" title=\"五、重复匹配\"></a>五、重复匹配</h1><ul>\n<li><strong>+</strong>  匹配 1 个或者多个字符</li>\n<li><strong>\\</strong> * 匹配 0 个或者多个</li>\n<li><strong>?</strong>  匹配 0 个或者 1 个</li>\n</ul>\n<p><strong>应用</strong> </p>\n<p>匹配邮箱地址。</p>\n<p><strong>正则表达式</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[\\w.]+@\\w+\\.\\w+</span><br></pre></td></tr></table></figure>\n<p>[\\w.] 匹配的是字母数字或者 . ，在其后面加上 + ，表示匹配多次。在字符集合 [ ] 里，. 不是元字符；</p>\n<p><strong>匹配结果</strong> </p>\n<p><strong>abc.def<span>@</span>qq.com</strong> </p>\n<ul>\n<li><strong>{n}</strong>  匹配 n 个字符</li>\n<li><strong>{m, n}</strong>  匹配 m~n 个字符</li>\n<li><strong>{m,}</strong>  至少匹配 m 个字符</li>\n</ul>\n<p>* 和 + 都是贪婪型元字符，会匹配最多的内容。在后面加 ? 可以转换为懒惰型元字符，例如 *?、+? 和 {m, n}? 。</p>\n<p><strong>正则表达式</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.+c</span><br></pre></td></tr></table></figure>\n<p>由于 + 是贪婪型的，因此 .+ 会匹配更可能多的内容，所以会把整个 abcabcabc 文本都匹配，而不是只匹配前面的 abc 文本。用懒惰型可以实现匹配前面的。</p>\n<p><strong>匹配结果</strong> </p>\n<p><strong>abcabcabc</strong> </p>\n<h1 id=\"六、位置匹配\"><a href=\"#六、位置匹配\" class=\"headerlink\" title=\"六、位置匹配\"></a>六、位置匹配</h1><h2 id=\"单词边界\"><a href=\"#单词边界\" class=\"headerlink\" title=\"单词边界\"></a>单词边界</h2><p><strong>\\b</strong>  可以匹配一个单词的边界，边界是指位于 \\w 和 \\W 之间的位置；<strong>\\B</strong> 匹配一个不是单词边界的位置。</p>\n<p>\\b 只匹配位置，不匹配字符，因此 \\babc\\b 匹配出来的结果为 3 个字符。</p>\n<h2 id=\"字符串边界\"><a href=\"#字符串边界\" class=\"headerlink\" title=\"字符串边界\"></a>字符串边界</h2><p><strong>^</strong>  匹配整个字符串的开头，<strong>$</strong> 匹配结尾。</p>\n<p>^ 元字符在字符集合中用作求非，在字符集合外用作匹配字符串的开头。</p>\n<p>分行匹配模式（multiline）下，换行被当做字符串的边界。</p>\n<p><strong>应用</strong> </p>\n<p>匹配代码中以 // 开始的注释行</p>\n<p><strong>正则表达式</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\s*\\/\\/.*$</span><br></pre></td></tr></table></figure>\n<p><div align=\"center\"> <img src=\"../pics//600e9c75-5033-4dad-ae2b-930957db638e.png\"> </div><br></p>\n<p><strong>匹配结果</strong> </p>\n<ol>\n<li>public void fun() {</li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp;     <strong>// 注释 1</strong> </li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp;    int a = 1;</li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp;    int b = 2;</li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp;     <strong>// 注释 2</strong> </li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp;    int c = a + b;</li>\n<li>}</li>\n</ol>\n<h1 id=\"七、使用子表达式\"><a href=\"#七、使用子表达式\" class=\"headerlink\" title=\"七、使用子表达式\"></a>七、使用子表达式</h1><p>使用  <strong>( )</strong>  定义一个子表达式。子表达式的内容可以当成一个独立元素，即可以将它看成一个字符，并且使用 * 等元字符。</p>\n<p>子表达式可以嵌套，但是嵌套层次过深会变得很难理解。</p>\n<p><strong>正则表达式</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(ab)&#123;2,&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>匹配结果</strong> </p>\n<p><strong>ababab</strong> </p>\n<p><strong>|</strong>  是或元字符，它把左边和右边所有的部分都看成单独的两个部分，两个部分只要有一个匹配就行。</p>\n<p><strong>正则表达式</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(19|20)\\d&#123;2&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>匹配结果</strong> </p>\n<ol>\n<li><strong>1900</strong> </li>\n<li><strong>2010</strong> </li>\n<li>1020</li>\n</ol>\n<p><strong>应用</strong> </p>\n<p>匹配 IP 地址。</p>\n<p>IP 地址中每部分都是 0-255 的数字，用正则表达式匹配时以下情况是合法的：</p>\n<ul>\n<li>一位数字</li>\n<li>不以 0 开头的两位数字</li>\n<li>1 开头的三位数</li>\n<li>2 开头，第 2 位是 0-4 的三位数</li>\n<li>25 开头，第 3 位是 0-5 的三位数</li>\n</ul>\n<p><strong>正则表达式</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">((25[0-5]|(2[0-4]\\d)|(1\\d&#123;2&#125;)|([1-9]\\d)|(\\d))\\.)&#123;3&#125;(25[0-5]|(2[0-4]\\d)|(1\\d&#123;2&#125;)|([1-9]\\d)|(\\d))</span><br></pre></td></tr></table></figure>\n<p><strong>匹配结果</strong> </p>\n<ol>\n<li><strong>192.168.0.1</strong> </li>\n<li>00.00.00.00</li>\n<li>555.555.555.555</li>\n</ol>\n<h1 id=\"八、回溯引用\"><a href=\"#八、回溯引用\" class=\"headerlink\" title=\"八、回溯引用\"></a>八、回溯引用</h1><p>回溯引用使用  <strong>\\n</strong>  来引用某个子表达式，其中 n 代表的是子表达式的序号，从 1 开始。它和子表达式匹配的内容一致，比如子表达式匹配到 abc，那么回溯引用部分也需要匹配 abc 。</p>\n<p><strong>应用</strong> </p>\n<p>匹配 HTML 中合法的标题元素。</p>\n<p><strong>正则表达式</strong> </p>\n<p>\\1 将回溯引用子表达式 (h[1-6]) 匹配的内容，也就是说必须和子表达式匹配的内容一致。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;(h[1-6])&gt;\\w*?&lt;\\/\\1&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>匹配结果</strong> </p>\n<ol>\n<li><strong>&lt;h1&gt;x&lt;/h1&gt;</strong> </li>\n<li><strong>&lt;h2&gt;x&lt;/h2&gt;</strong> </li>\n<li>&lt;h3&gt;x&lt;/h1&gt;</li>\n</ol>\n<h2 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h2><p>需要用到两个正则表达式。</p>\n<p><strong>应用</strong> </p>\n<p>修改电话号码格式。</p>\n<p><strong>文本</strong> </p>\n<p>313-555-1234</p>\n<p><strong>查找正则表达式</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(\\d&#123;3&#125;)(-)(\\d&#123;3&#125;)(-)(\\d&#123;4&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>替换正则表达式</strong> </p>\n<p>在第一个子表达式查找的结果加上 () ，然后加一个空格，在第三个和第五个字表达式查找的结果中间加上 - 进行分隔。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">($1) $3-$5</span><br></pre></td></tr></table></figure>\n<p><strong>结果</strong> </p>\n<p>(313) 555-1234</p>\n<h2 id=\"大小写转换\"><a href=\"#大小写转换\" class=\"headerlink\" title=\"大小写转换\"></a>大小写转换</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">元字符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">\\l</td>\n<td style=\"text-align:center\">把下个字符转换为小写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\u</td>\n<td style=\"text-align:center\">把下个字符转换为大写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\L</td>\n<td style=\"text-align:center\">把\\L 和\\E 之间的字符全部转换为小写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\U</td>\n<td style=\"text-align:center\">把\\U 和\\E 之间的字符全部转换为大写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\E</td>\n<td style=\"text-align:center\">结束\\L 或者\\U</td>\n</tr>\n</tbody>\n</table>\n<p><strong>应用</strong> </p>\n<p>把文本的第二个和第三个字符转换为大写。</p>\n<p><strong>文本</strong> </p>\n<p>abcd</p>\n<p><strong>查找</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(\\w)(\\w&#123;2&#125;)(\\w)</span><br></pre></td></tr></table></figure>\n<p><strong>替换</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$1\\U$2\\E$3</span><br></pre></td></tr></table></figure>\n<p><strong>结果</strong> </p>\n<p>aBCd</p>\n<h1 id=\"九、前后查找\"><a href=\"#九、前后查找\" class=\"headerlink\" title=\"九、前后查找\"></a>九、前后查找</h1><p>前后查找规定了匹配的内容首尾应该匹配的内容，但是又不包含首尾匹配的内容。向前查找用  <strong>?=</strong>  来定义，它规定了尾部匹配的内容，这个匹配的内容在 ?= 之后定义。所谓向前查找，就是规定了一个匹配的内容，然后以这个内容为尾部向前面查找需要匹配的内容。向后匹配用 ?&lt;= 定义（注: javaScript 不支持向后匹配, java 对其支持也不完善）。</p>\n<p><strong>应用</strong> </p>\n<p>查找出邮件地址 @ 字符前面的部分。</p>\n<p><strong>正则表达式</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\w+(?=@)</span><br></pre></td></tr></table></figure>\n<p><strong>结果</strong> </p>\n<p><strong>abc</strong> @qq.com</p>\n<p>对向前和向后查找取非，只要把 = 替换成 ! 即可，比如 (?=) 替换成 (?!) 。取非操作使得匹配那些首尾不符合要求的内容。</p>\n<h1 id=\"十、嵌入条件\"><a href=\"#十、嵌入条件\" class=\"headerlink\" title=\"十、嵌入条件\"></a>十、嵌入条件</h1><h2 id=\"回溯引用条件\"><a href=\"#回溯引用条件\" class=\"headerlink\" title=\"回溯引用条件\"></a>回溯引用条件</h2><p>条件判断为某个子表达式是否匹配，如果匹配则需要继续匹配条件表达式后面的内容。</p>\n<p><strong>正则表达式</strong> </p>\n<p>子表达式 (\\() 匹配一个左括号，其后的 ? 表示匹配 0 个或者 1 个。 ?(1) 为条件，当子表达式 1 匹配时条件成立，需要执行 ) 匹配，也就是匹配右括号。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(\\()?abc(?(1)\\))</span><br></pre></td></tr></table></figure>\n<p><strong>结果</strong> </p>\n<ol>\n<li><strong>(abc)</strong> </li>\n<li><strong>abc</strong> </li>\n<li>(abc</li>\n</ol>\n<h2 id=\"前后查找条件\"><a href=\"#前后查找条件\" class=\"headerlink\" title=\"前后查找条件\"></a>前后查找条件</h2><p>条件为定义的首尾是否匹配，如果匹配，则继续执行后面的匹配。注意，首尾不包含在匹配的内容中。</p>\n<p><strong>正则表达式</strong> </p>\n<p> ?(?=-) 为前向查找条件，只有在以 - 为前向查找的结尾能匹配 \\d{5} ，才继续匹配 -\\d{4} 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d&#123;5&#125;(?(?=-)-\\d&#123;4&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>结果</strong> </p>\n<ol>\n<li><strong>11111</strong> </li>\n<li>22222-</li>\n<li><strong>33333-4444</strong> </li>\n</ol>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li>BenForta. 正则表达式必知必会 [M]. 人民邮电出版社, 2007.</li>\n</ul>\n","categories":[{"name":"java后端","slug":"java后端","count":10,"path":"api/categories/java后端.json"},{"name":"java基础","slug":"java后端/java基础","count":10,"path":"api/categories/java后端/java基础.json"}],"tags":[{"name":"java","slug":"java","count":11,"path":"api/tags/java.json"}]}