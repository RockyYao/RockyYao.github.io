{"title":"Docker","slug":"Docker","date":"2018-05-19T08:43:46.000Z","updated":"2018-09-26T07:51:06.762Z","comments":true,"path":"api/articles/Docker.json","photos":[],"link":"","excerpt":"一、解决的问题二、与虚拟机的比较三、优势四、使用场景五、镜像与容器参考资料  [Figure] ","covers":["../pics//011f3ef6-d824-4d43-8b2c-36dab8eaaa72-1.png","../pics//71f61bc3-582d-4c27-8bdd-dc7fb135bf8f.png","../pics//7e873b60-44dc-4911-b080-defd5b8f0b49.png","../pics//docker-filesystems-busyboxrw.png"],"content":"<!-- GFM-TOC -->\n<ul>\n<li><a href=\"#一解决的问题\">一、解决的问题</a></li>\n<li><a href=\"#二与虚拟机的比较\">二、与虚拟机的比较</a></li>\n<li><a href=\"#三优势\">三、优势</a></li>\n<li><a href=\"#四使用场景\">四、使用场景</a></li>\n<li><a href=\"#五镜像与容器\">五、镜像与容器</a></li>\n<li><a href=\"#参考资料\">参考资料</a><!-- GFM-TOC -->\n</li>\n</ul>\n<p><div align=\"center\"> <img src=\"../pics//011f3ef6-d824-4d43-8b2c-36dab8eaaa72-1.png\"> </div><br><br><a id=\"more\"></a></p>\n<h1 id=\"一、解决的问题\"><a href=\"#一、解决的问题\" class=\"headerlink\" title=\"一、解决的问题\"></a>一、解决的问题</h1><p>由于不同的机器有不同的操作系统，以及不同的库和组件，在将一个应用部署到多台机器上需要进行大量的环境配置操作。</p>\n<p>Docker 主要解决环境配置问题，它是一种虚拟化技术，对进程进行隔离，被隔离的进程独立于宿主操作系统和其它隔离的进程。使用 Docker 可以不修改应用程序代码，不需要开发人员学习特定环境下的技术，就能够将现有的应用程序部署在其他机器中。</p>\n<h1 id=\"二、与虚拟机的比较\"><a href=\"#二、与虚拟机的比较\" class=\"headerlink\" title=\"二、与虚拟机的比较\"></a>二、与虚拟机的比较</h1><p>虚拟机也是一种虚拟化技术，它与 Docker 最大的区别在于它是通过模拟硬件，并在硬件上安装操作系统来实现。</p>\n<p><div align=\"center\"> <img src=\"../pics//71f61bc3-582d-4c27-8bdd-dc7fb135bf8f.png\"> </div><br></p>\n<p><div align=\"center\"> <img src=\"../pics//7e873b60-44dc-4911-b080-defd5b8f0b49.png\"> </div><br></p>\n<h2 id=\"启动速度\"><a href=\"#启动速度\" class=\"headerlink\" title=\"启动速度\"></a>启动速度</h2><p>启动虚拟机需要启动虚拟机的操作系统，再启动应用，这个过程非常慢；</p>\n<p>而启动 Docker 相当于启动宿主操作系统上的一个进程。</p>\n<h2 id=\"占用资源\"><a href=\"#占用资源\" class=\"headerlink\" title=\"占用资源\"></a>占用资源</h2><p>虚拟机是一个完整的操作系统，需要占用大量的磁盘、内存和 CPU，一台机器只能开启几十个的虚拟机。</p>\n<p>而 Docker 只是一个进程，只需要将应用以及相关的组件打包，在运行时占用很少的资源，一台机器可以开启成千上万个 Docker。</p>\n<h1 id=\"三、优势\"><a href=\"#三、优势\" class=\"headerlink\" title=\"三、优势\"></a>三、优势</h1><p>除了启动速度快以及占用资源少之外，Docker 具有以下优势：</p>\n<h2 id=\"更容易迁移\"><a href=\"#更容易迁移\" class=\"headerlink\" title=\"更容易迁移\"></a>更容易迁移</h2><p>提供一致性的运行环境，可以在不同的机器上进行迁移，而不用担心环境变化导致无法运行。</p>\n<h2 id=\"更容易维护\"><a href=\"#更容易维护\" class=\"headerlink\" title=\"更容易维护\"></a>更容易维护</h2><p>使用分层技术和镜像，使得应用可以更容易复用重复部分。复用程度越高，维护工作也越容易。</p>\n<h2 id=\"更容易扩展\"><a href=\"#更容易扩展\" class=\"headerlink\" title=\"更容易扩展\"></a>更容易扩展</h2><p>可以使用基础镜像进一步扩展得到新的镜像，并且官方和开源社区提供了大量的镜像，通过扩展这些镜像可以非常容易得到我们想要的镜像。</p>\n<h1 id=\"四、使用场景\"><a href=\"#四、使用场景\" class=\"headerlink\" title=\"四、使用场景\"></a>四、使用场景</h1><h2 id=\"持续集成\"><a href=\"#持续集成\" class=\"headerlink\" title=\"持续集成\"></a>持续集成</h2><p>持续集成指的是频繁地将代码集成到主干上，这样能够更快地发现错误。</p>\n<p>Docker 具有轻量级以及隔离性的特点，在将代码集成到一个 Docker 中不会对其它 Docker 产生影响。</p>\n<h2 id=\"提供可伸缩的云服务\"><a href=\"#提供可伸缩的云服务\" class=\"headerlink\" title=\"提供可伸缩的云服务\"></a>提供可伸缩的云服务</h2><p>根据应用的负载情况，可以很容易地增加或者减少 Docker。</p>\n<h2 id=\"搭建微服务架构\"><a href=\"#搭建微服务架构\" class=\"headerlink\" title=\"搭建微服务架构\"></a>搭建微服务架构</h2><p>Docker 轻量级的特点使得它很适合用于部署、维护、组合微服务。</p>\n<h1 id=\"五、镜像与容器\"><a href=\"#五、镜像与容器\" class=\"headerlink\" title=\"五、镜像与容器\"></a>五、镜像与容器</h1><p>镜像是一种静态的结构，可以看成面向对象里面的类，而容器是镜像的一个实例。</p>\n<p>镜像包含着容器运行时所需要的代码以及其它组件，它是一种分层结构，每一层都是只读的（read-only layers）。构建镜像时，会一层一层构建，前一层是后一层的基础。镜像的这种分层存储结构很适合镜像的复用以及定制。</p>\n<p>构建容器时，通过在镜像的基础上添加一个可写层（writable layer），用来保存着容器运行过程中的修改。</p>\n<p><div align=\"center\"> <img src=\"../pics//docker-filesystems-busyboxrw.png\"> </div><br></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://blog.docker.com/2017/08/docker-101-introduction-docker-webinar-recap/\" target=\"_blank\" rel=\"noopener\">DOCKER 101: INTRODUCTION TO DOCKER WEBINAR RECAP</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html\" target=\"_blank\" rel=\"noopener\">Docker 入门教程</a></li>\n<li><a href=\"http://www.bogotobogo.com/DevOps/Docker/Docker_Container_vs_Virtual_Machine.php\" target=\"_blank\" rel=\"noopener\">Docker container vs Virtual machine</a></li>\n<li><a href=\"https://linoxide.com/linux-how-to/dockerfile-create-docker-container/\" target=\"_blank\" rel=\"noopener\">How to Create Docker Container using Dockerfile</a></li>\n<li><a href=\"http://www.cnblogs.com/sammyliu/p/5877964.html\" target=\"_blank\" rel=\"noopener\">理解 Docker（2）：Docker 镜像</a></li>\n<li><a href=\"https://yeasy.gitbooks.io/docker_practice/introduction/why.html\" target=\"_blank\" rel=\"noopener\">为什么要使用 Docker？</a></li>\n<li><a href=\"https://www.docker.com/what-docker\" target=\"_blank\" rel=\"noopener\">What is Docker</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html\" target=\"_blank\" rel=\"noopener\">持续集成是什么？</a></li>\n</ul>\n","categories":[{"name":"开源软件","slug":"开源软件","count":2,"path":"api/categories/开源软件.json"},{"name":"Docker","slug":"开源软件/Docker","count":1,"path":"api/categories/开源软件/Docker.json"}],"tags":[{"name":"其他","slug":"其他","count":6,"path":"api/tags/其他.json"}]}