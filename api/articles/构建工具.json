{"title":"构建工具","slug":"构建工具","date":"2018-06-18T00:47:41.000Z","updated":"2018-09-26T07:52:40.641Z","comments":true,"path":"api/articles/构建工具.json","photos":[],"link":"","excerpt":"一、构建工具的作用二、Java 主流构建工具三、Maven参考资料","covers":["../pics//897503d0-59e3-4752-903d-529fbdb72fee.jpg"],"content":"<!-- GFM-TOC -->\n<ul>\n<li><a href=\"#一构建工具的作用\">一、构建工具的作用</a></li>\n<li><a href=\"#二java-主流构建工具\">二、Java 主流构建工具</a></li>\n<li><a href=\"#三maven\">三、Maven</a></li>\n<li><a href=\"#参考资料\">参考资料</a><!-- GFM-TOC -->\n</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"一、构建工具的作用\"><a href=\"#一、构建工具的作用\" class=\"headerlink\" title=\"一、构建工具的作用\"></a>一、构建工具的作用</h1><p>构建工具是用于构建项目的自动化工具，主要包含以下工作：</p>\n<h2 id=\"依赖管理\"><a href=\"#依赖管理\" class=\"headerlink\" title=\"依赖管理\"></a>依赖管理</h2><p>不再需要手动导入 Jar 依赖包，并且可以自动处理依赖关系，也就是说某个依赖如果依赖于其它依赖，构建工具可以帮助我们自动处理这种依赖管理。</p>\n<h2 id=\"运行单元测试\"><a href=\"#运行单元测试\" class=\"headerlink\" title=\"运行单元测试\"></a>运行单元测试</h2><p>不再需要在项目代码中添加测试代码，从而避免了污染项目代码。</p>\n<h2 id=\"将源代码转化为可执行文件\"><a href=\"#将源代码转化为可执行文件\" class=\"headerlink\" title=\"将源代码转化为可执行文件\"></a>将源代码转化为可执行文件</h2><p>包含预处理、编译、汇编、链接等步骤。</p>\n<h2 id=\"将可执行文件进行打包\"><a href=\"#将可执行文件进行打包\" class=\"headerlink\" title=\"将可执行文件进行打包\"></a>将可执行文件进行打包</h2><p>不再需要使用 IDE 将应用程序打包成 Jar 包。</p>\n<h2 id=\"发布到生产服务器上\"><a href=\"#发布到生产服务器上\" class=\"headerlink\" title=\"发布到生产服务器上\"></a>发布到生产服务器上</h2><p>不再需要通过 FTP 将 Jar 包上传到服务器上。</p>\n<h1 id=\"二、Java-主流构建工具\"><a href=\"#二、Java-主流构建工具\" class=\"headerlink\" title=\"二、Java 主流构建工具\"></a>二、Java 主流构建工具</h1><p>主要包括 Ant、Maven 和 Gradle。</p>\n<p><div align=\"center\"> <img src=\"../pics//897503d0-59e3-4752-903d-529fbdb72fee.jpg\"> </div><br></p>\n<p>Gradle 和 Maven 的区别是，它使用 Groovy 这种特定领域语言（DSL）来管理构建脚本，而不再使用 XML 这种标记性语言。因为项目如果庞大的话，XML 很容易就变得臃肿。</p>\n<p>例如要在项目中引入 Junit，Maven 的代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>jizg.study.maven.hello<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hello-first<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>而 Gradle 只需要几行代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    testCompile <span class=\"string\">\"junit:junit:4.10\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、Maven\"><a href=\"#三、Maven\" class=\"headerlink\" title=\"三、Maven\"></a>三、Maven</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>提供了项目对象模型（POM）文件来管理项目的构建。</p>\n<h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><p>仓库的搜索顺序为：本地仓库、中央仓库、远程仓库。</p>\n<ul>\n<li>本地仓库用来存储项目的依赖库；</li>\n<li>中央仓库是下载依赖库的默认位置；</li>\n<li>远程仓库，因为并非所有的库存储在中央仓库，或者中央仓库访问速度很慢，远程仓库是中央仓库的补充。</li>\n</ul>\n<h2 id=\"POM\"><a href=\"#POM\" class=\"headerlink\" title=\"POM\"></a>POM</h2><p>POM 代表项目对象模型，它是一个 XML 文件，保存在项目根目录的 pom.xml 文件中。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>[groupId, artifactId, version, packaging, classfier] 称为一个项目的坐标，其中 groupId、artifactId、version 必须定义，packaging 可选（默认为 Jar），classfier 不能直接定义的，需要结合插件使用。</p>\n<ul>\n<li>groupId：项目组 Id，必须全球唯一；</li>\n<li>artifactId：项目 Id，即项目名；</li>\n<li>version：项目版本；</li>\n<li>packaging：项目打包方式。</li>\n</ul>\n<h2 id=\"依赖原则\"><a href=\"#依赖原则\" class=\"headerlink\" title=\"依赖原则\"></a>依赖原则</h2><h3 id=\"1-依赖路径最短优先原则\"><a href=\"#1-依赖路径最短优先原则\" class=\"headerlink\" title=\"1. 依赖路径最短优先原则\"></a>1. 依赖路径最短优先原则</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A -&gt; B -&gt; C -&gt; X(1.0)</span><br><span class=\"line\">A -&gt; D -&gt; X(2.0)</span><br></pre></td></tr></table></figure>\n<p>由于 X(2.0) 路径最短，所以使用 X(2.0)。</p>\n<h3 id=\"2-声明顺序优先原则\"><a href=\"#2-声明顺序优先原则\" class=\"headerlink\" title=\"2. 声明顺序优先原则\"></a>2. 声明顺序优先原则</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A -&gt; B -&gt; X(1.0)</span><br><span class=\"line\">A -&gt; C -&gt; X(2.0)</span><br></pre></td></tr></table></figure>\n<p>在 POM 中最先声明的优先，上面的两个依赖如果先声明 B，那么最后使用 X(1.0)。</p>\n<h3 id=\"3-覆写优先原则\"><a href=\"#3-覆写优先原则\" class=\"headerlink\" title=\"3. 覆写优先原则\"></a>3. 覆写优先原则</h3><p>子 POM 内声明的依赖优先于父 POM 中声明的依赖。</p>\n<h2 id=\"解决依赖冲突\"><a href=\"#解决依赖冲突\" class=\"headerlink\" title=\"解决依赖冲突\"></a>解决依赖冲突</h2><p>找到 Maven 加载的 Jar 包版本，使用 <code>mvn dependency:tree</code> 查看依赖树，根据依赖原则来调整依赖在 POM 文件的声明顺序。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"http://maven.apache.org/pom.html#Dependency_Version_Requirement_Specification\" target=\"_blank\" rel=\"noopener\">POM Reference</a></li>\n<li><a href=\"https://stackoverflow.com/questions/7249871/what-is-a-build-tool\" target=\"_blank\" rel=\"noopener\">What is a build tool?</a></li>\n<li><a href=\"https://programmingmitra.blogspot.com/2016/05/java-build-tools-comparisons-ant-vs.html\" target=\"_blank\" rel=\"noopener\">Java Build Tools Comparisons: Ant vs Maven vs Gradle</a></li>\n<li><a href=\"http://sagioto.github.io/maven2gradle/\" target=\"_blank\" rel=\"noopener\">maven 2 gradle</a></li>\n<li><a href=\"https://www.imooc.com/learn/833\" target=\"_blank\" rel=\"noopener\">新一代构建工具 gradle</a></li>\n</ul>\n","categories":[{"name":"其他","slug":"其他","count":4,"path":"api/categories/其他.json"}],"tags":[{"name":"其他","slug":"其他","count":6,"path":"api/tags/其他.json"}]}